<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 29 Nov 2020 05:48:25 +0000</pubDate>
    <lastBuildDate>Sun, 29 Nov 2020 05:48:25 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Зипперы в Clojure (часть 8). Заключение</title>
        <description>&lt;h2 id=&quot;Оглавление&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В заключение рассмотрим другие возможности зипперов, которые могут быть полезны.&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;

&lt;p&gt;И прошлых примеров видно, что зипперы подходят для работы с форматом XML. В том
числе их можно применить и для HTML. Строго говоря, синтаксис HTML отличается от
XML: некоторые элементы вроде &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; или &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; не имеют закрывающих
тегов. Проблему можно решить с помощью парсеров, которые учитывают эти
особенности. На выходе получим XML-дерево, которое поддается обходу как в
примерах выше.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Библиотека &lt;a href=&quot;https://github.com/davidsantiago/hickory&quot;&gt;Hickory&lt;/a&gt; предлагает парсер разметки HTML. Разбор основан на
Java-библиотеке &lt;a href=&quot;https://jsoup.org/&quot;&gt;JSoup&lt;/a&gt;, которая строит дерево элементов. Hickory
содержит модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;hickory.zip&lt;/code&gt;, чтобы перестроить исходное дерево в
Clojure-подобное (с элементами &lt;code class=&quot;highlighter-rouge&quot;&gt;:tag&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:attrs&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;:content&lt;/code&gt;). Добавьте в проект
зависимость:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.7.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и выполните пример:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper-manual.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://grishaev.me/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java.net.URL.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;h/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;h/as-hiccup&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hz/hiccup-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-clj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Объясним эти преобразованиия. В переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; загружается верстка сайта в
виде строки. В переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;doc-src&lt;/code&gt; оказалось дерево, полученное из HTML. Это
объект класса &lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt; из пакета &lt;code class=&quot;highlighter-rouge&quot;&gt;org.jsoup.nodes&lt;/code&gt;. С точки зрения Clojure это
черный ящик: чтобы работать с ним, нужно читать документацию к методам
&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;as-hiccup&lt;/code&gt; переводит документ в набор вложенных векторов вида:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:attr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;где на первом месте тег, затем словарь атрибутов, а за ним – любое число таких
же векторов или строк. Это стандартное представление HTML в Clojure, и многие
библиотеки следуют ему.&lt;/p&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;hiccup-zip&lt;/code&gt; возвращает зиппер для этой структуры. С ним можно сделать
все то, в чем мы упражнялись раньше, например:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;удалить нежелательные теги вроде &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;оставить эти теги, но исправить их атрибуты;&lt;/li&gt;
  &lt;li&gt;оставить опасные теги, только если их источник указывает на доверенные сайты;&lt;/li&gt;
  &lt;li&gt;найти наиболее вложенные элементы (оценить длину результата &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/path&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вот как найти все картинки страницы:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-img?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-&amp;gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-img?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-&amp;gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/static/photo-round-small.png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Первая функция проверяет, что локация указывает на узел с тегом &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, вторая
извлекает из него атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;. Последняя форма вернет список ссылок на
изображения.&lt;/p&gt;

&lt;p&gt;На базе этих действий можно построить фильтрацию HTML, что особенно важно, если
разметка приходит от пользователя. Другой сценарий — найти в HTML подходящее
изображение для обложки в соцсети. Для этого нужно выбрать все изображения,
оценить их ширину и высоту и выбрать наибольшее по площади (если заполнены
атрибуты &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Hickory учитывает типовые случаи и предлагает селекторы для поиска по тегу и
атрибуту. Для этого даже не обязательно приводить дерево JSoup к зипперу. Однако
в редких случаях нужно найти теги со сложной взаимосвязью как в примере с
товаром и набором (только в наборе или строго не в нем). Эти задачи изящно
ложатся на зипперы.&lt;/p&gt;

&lt;h2 id=&quot;Данные-и-сериализация&quot;&gt;Данные и сериализация&lt;/h2&gt;

&lt;p&gt;Другой плюс зипперов в том, что они представлены данными — комбинацией списков и
словарей. Это значит, текущий зиппер можно записать в EDN или JSON. При чтении
мы получим прежнюю структуру данных и продолжим обход с места, где
остановились. Это отличает Clojure от объектных языков, где в общем случае
нельзя записать объект в файл без определений методов &lt;code class=&quot;highlighter-rouge&quot;&gt;(de)serialize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;При восстановлении зиппера помните о его метаданных. Функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;make-node&lt;/code&gt;, которые мы передали в конструктор, хранятся в
метаданных зиппера. Это сделано для того, чтобы отделить данные от действий над
ними. Проверим метаданные:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:branch?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.core/sequential?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip/children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:make-node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip/make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Напишем функции для сброса и чтения EDN:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-save&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pr-str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn/read-string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Предположим, мы дошли со середины зиппера, и теперь сохраним его в файл:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edn-save&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zipper.edn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы считанный из файла зиппер заработал, добавьте ему метаданные. Их можно
либо вынести в переменную заранее, либо объявить вручную.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:branch?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequential?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'hickory.zip/children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:make-node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'hickory.zip/make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Во втором случае нам прошлось указать ссылки на функции &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; и
&lt;code class=&quot;highlighter-rouge&quot;&gt;make-node&lt;/code&gt;, потому что они приватные. Прочитанный зиппер окажется в том же
состоянии, что и в момент сохранения.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip-new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zipper.edn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip-new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:head&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Хранение зиппера в долговременной памяти дарит новые возможности. Например,
обход каких-то данных занимает время, и программа может делать задачу порциями,
сохраняя промежуточных результат. Так работают сложные бизнес-сценарии. Если
клиент отказывается от услуг фирмы, вы должны удалить его записи в базе, файлы,
ссылки на него в документах и много другое. Этот процесс можно представить как
набор шагов, некоторые из которых выполняются последовательно, а другие —
параллельно. В Exoscale подобные сценарии работают на базе зипперов. На каждом
шаге код читает из базы зиппер в виде EDN, сдвигает его на один &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;,
выполняет задачу и обновляет запись в базе с новой версией зиппера.&lt;/p&gt;

&lt;h2 id=&quot;Другое&quot;&gt;Другое&lt;/h2&gt;

&lt;p&gt;Пример с разменом валют показывает, как найти решение задачи перебором. Если
нужно найти оптимальную цепочку шагов, максимальную цену, маршрут обхода —
возможно, вам помогут зипперы. Легко проверить, ложится ли на них ваша
задача. Зиппер подразумевает, что у вас есть текущее значение и несколько других
на его базе. Если условие работает, вы в шаге от того, чтобы построить дерево и
обойти его.&lt;/p&gt;

&lt;p&gt;Скажем, согласно таблице обмена доллар (текущее значение) можно разменять на
евро и рубль (дочерние значения). Из точки A (текущее) можно проехать в пункты B
и C (дочерние). В HTML один тег может включать в себя другие. Все три случая
подходят к зипперу, нужно только описать функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt; — может элемент иметь
потомков, и &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; — как конкретно их найти.&lt;/p&gt;

&lt;h2 id=&quot;Сторонние-библиотеки&quot;&gt;Сторонние библиотеки&lt;/h2&gt;

&lt;p&gt;Модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt; предлагает достаточно функций; все же по ходу главы нам
пришлось дописывать свои. В библиотеке &lt;a href=&quot;https://github.com/clojure/data.zip/&quot;&gt;data.zip&lt;/a&gt; собраны различные
дополнения, например предикаты &lt;code class=&quot;highlighter-rouge&quot;&gt;attr=&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;tag=&lt;/code&gt; для поиска по атрибуту и
тегу. Изучите библиотеку, если много работаете с зипперами.&lt;/p&gt;

&lt;h2 id=&quot;Заключение&quot;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Зипперы — это механизм навигации по структуре данных. Зиппер предлагает движение
по четырем сторонам: вниз, вверх, влево, вправо. Элемент в центре называется
текущим.&lt;/p&gt;

&lt;p&gt;Зиппер может перемещаться по самым разным структурам. Ему нужно знать только две
вещи: является ли текущий элемент веткой дерева и если да, то как найти
потомков. Для этого зиппер принимает функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt;, которые
позже хранит в метаданных.&lt;/p&gt;

&lt;p&gt;Обычно потомков находят из родительского узла, но в некоторых случаях получают
динамически. Например, чтобы узнать, на какие валюты можно разменять текущую,
обращаются к словарю обмена. Для этого словарь должен быть виден функции
&lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; в качестве глобальной переменной или замыкания.&lt;/p&gt;

&lt;p&gt;Текущий элемент зиппера называют локацией. Он хранит не только очередное
значение, но и данные для перехода во все стороны, а также путь. Это выгодно
отличает зиппер от &lt;code class=&quot;highlighter-rouge&quot;&gt;tree-seq&lt;/code&gt; и аналогов, которые раскладывают дерево в цепь без
учета пути к элементу. Некоторые задачи состоят именно в поиске нужного пути.&lt;/p&gt;

&lt;p&gt;Зиппер предлагает функции для правки и удаления текущего узла. Правка может
отталкиваться от текущего значения (&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/edit&lt;/code&gt;) или нового (&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/replace&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;По умолчанию обход зиппера происходит в глубину (depth first). При переходе в
конец локация получит отметку о том, что выполнен полный цикл
прохода. Используйте функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/end?&lt;/code&gt;, чтобы прекратить итерацию. В наших
примерах мы написали функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;zip-iter&lt;/code&gt;, которая совершает строго один обход.&lt;/p&gt;

&lt;p&gt;Для некоторых задач необходим обход в ширину. Это может случиться, когда одна из
ветвей дерева потенциально бесконечна. Для обхода в ширину мы написали свои
функции, которых нет в поставке Clojure.zip.&lt;/p&gt;

&lt;p&gt;Зипперы полезны в работе с XML, поиском решений, фильтрации HTML. Разберитесь с
ними, чтобы быть готовыми к самым разным задачам производства.&lt;/p&gt;

&lt;h2 id=&quot;Оглавление-1&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-zippers-8/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-zippers-8/</guid>
        
        <category>clojure</category>
        
        <category>zippers</category>
        
        
      </item>
    
      <item>
        <title>Помогайте (опровержение)</title>
        <description>&lt;p&gt;Послушайте еще одну кулстори и выводы из нее.&lt;/p&gt;

&lt;p&gt;Недавно я смотрел код на Джаве, и не понял одну вещь. Все-таки я кложурист и в
кишки JVM лажу только по необходимости. Было непонятно, почему вместо интерфейса
можно передать лямбду, ведь последняя, насколько я знаю, имплементит &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;
и &lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;, а в коде был левый интерфейс. Нормальный вопрос, который знает
средней руки джавист. И тут Штирлиц ошибся — спросил об этом в Телеграм-чатах.&lt;/p&gt;

&lt;p&gt;Думаете, кто-то ответил? В целом да, но нет так, как я ожидал. Меня спросили,
почему я считаю, что должно быть по-другому (хотя я не считал); зачем мне это
нужно и откуда такие вопросы. При этом в одном из чатов я был уже больше года, и
подозревать в троллинге было нелепо.&lt;/p&gt;

&lt;p&gt;Видно же, что люди знают ответ, никто, сука, никто не написал: начиная с JVM 8
компилятор адаптирует лямбды под интерфейсы с одним методом, точка. Спасибо,
хоть ссылку на чей-то блог скинули после пререканий.&lt;/p&gt;

&lt;p&gt;И вот я сидел и обтекал с этого. Парни, вы ни какие не профессионалы, а деды,
которые только и ждут реплики новичка, чтобы накинуться как воронье. Человек,
который бы ответил хоть одним предложением, получил бы мое расположение
навсегда. Но нет — были только еврейские вопросы обратно.&lt;/p&gt;

&lt;p&gt;Эта история только укрепила мое правило — людям нужно помогать. Когда кто-то
спрашивает, а у меня есть минутка, я отвечаю по мере знаний. С меня не убудет, а
тому бедняге, скорей всего, придется идти сквозь флуд к правильному решению. Так
что надо помочь.&lt;/p&gt;

&lt;p&gt;Несколько лет назад &lt;a href=&quot;/help/&quot;&gt;я писал пост&lt;/a&gt; про помощь коллеге. Опровергаю:
помогать коллегам нужно. Все равно вы спустите свободное время на Ютуб, а тут
хотя бы польза — умножение коллективных знаний.&lt;/p&gt;

&lt;p&gt;На работе у нас дежурство по ответам на тикеты клиентов. Никто не любит возиться
с ними, и я тоже. Но на некоторые вопросы, особенно связанные с веб-разработкой,
отвечаю супер-подробно, по два экрана получается. Чел на той стороне взрывается
кипятком, потому что обычно поддержке лишь бы закрыть тикет, а тут такое
чтиво. Эх, мне бы так отвечали!&lt;/p&gt;

&lt;p&gt;Вот и сейчас я пишу этот пост после того, как ответил некоему Томасу из
Швейцарии. Экран текста. Чел строит приложуху, но не идут дела. Зато благодаря
моим письмам продвинулся на стадию прототипа.&lt;/p&gt;

&lt;p&gt;Где-то я читал басню о том, как на заре Микрософта один клиент купил Ворд и
затупил. Он написал бумажное письмо с вопросами и бросил в ящик у двери
офиса. Через неделю он получил ответ на четырех листах, написанный от руки одним
из разработчиков. Тот чел до сих пор хранит это письмо. Вот она какая, любовь к
пользователям.&lt;/p&gt;

&lt;p&gt;Умрете — кто о вас вспомнит? Только те, кому вы помогали. Отвечайте и тогда
станете крутыми. Время никуда не убежит, все успеете. А иначе можно стать
токсичным мудаком и не заметить этого.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/help2/</link>
        <guid isPermaLink="true">https://grishaev.me/help2/</guid>
        
        <category>life</category>
        
        <category>help</category>
        
        
      </item>
    
      <item>
        <title>Громкость</title>
        <description>&lt;p&gt;Сто раз наблюдал такую картину. Стоит в очереди или транспорте человек, тыкает
пальцами в телефон, чего-то свайпает. Вдруг из телефона вырывается рев:
заставка, музыка, крики. Просто чел открыл видео и в сотый раз наступил на
грабли: у телефона и видео в приложении разный уровень звука.&lt;/p&gt;

&lt;p&gt;Со мной это было много раз. Прислали видосик. Убавил качельку звука на минимум,
тыкаю — орет. Да чтоб тебя.&lt;/p&gt;

&lt;p&gt;Не понимаю, кто придумал это поведение. Зачем что-то отдельно регулировать, если
хватает глобального уровня? Вы где-нибудь видели телевизор, который запоминает
звук под каждый канал? Или радио, где под каждую станцию на панели отдельная
ручка громкости? Вот оно, ограничение физического дизайна: нельзя вкатить
глупость на ровном месте, тебя поправят инженеры.&lt;/p&gt;

&lt;p&gt;У цифрового дизайна этого ограничения нет. Можно сделать десять экранов или пять
каналов звука: звонок, приложения, игры, будильник, что там еще… И бесконечные
настройки всего этого. Орет телефон — ты же понизил уровень звонка, балда, а
надо было медиа! Учись пользоваться девайсом.&lt;/p&gt;

&lt;p&gt;Технически я понимаю, что в телефоне может быть хоть десять каналов
звука. Допускаю, что кто-то их регулирует отдельно. Но блин, на порядки чаще я
вижу, как люди лихорадочно пытаются унять орущий телефон. Может, сделать
наоборот — пусть громкость будет глобальной по умолчанию, а для гиков сделать
настройки?&lt;/p&gt;

&lt;p&gt;Кстати, я даже представить не могу, где найти уровень звука Телеграма или
Ватсапчика. Спрашивается, как управлять тем, чего не видно?&lt;/p&gt;

&lt;p&gt;Все это очень странно.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/volume/</link>
        <guid isPermaLink="true">https://grishaev.me/volume/</guid>
        
        <category>life</category>
        
        <category>phone</category>
        
        
      </item>
    
      <item>
        <title>Твит картинкой</title>
        <description>
&lt;p&gt;Наверное, вы не заметили, а на Медузе случилось эпохальное событие. &lt;a href=&quot;https://meduza.io/shapito/2020/11/05/rossiyane-ne-spyat-kotoruyu-noch-sledyat-za-vyborami-vyborami-prezidenta-ssha-tolko-memy-i-odno-prorochestvo-o-tom-kak-eto-proishodilo&quot;&gt;Вышла
статья&lt;/a&gt;, в которой твиты показаны не через встроенный &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, а
картинками. Я даже не поверил, открыл инспектор и проверил. Картинки, офигеть.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/98508404-7b955d80-2270-11eb-8997-7ac0506de212.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Вёрстка странная: где-то &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;source&amp;gt;&lt;/code&gt;, а где-то &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;base64&lt;/code&gt;. Но при всей
примитивности это огромный шаг. Встроенные твиты, конечно, глупость; но как и с
любой глупостью, на ее преодоление нужны силы. И чем шире заблуждение, тем
сильнее должен быть рывок.&lt;/p&gt;

&lt;p&gt;Я никогда не мог увидеть встроенный твит. То ли это блокировщик, то ли &lt;a href=&quot;/cors/&quot;&gt;политики
CORS&lt;/a&gt; в браузере, а может, еще что — не важно. У меня обычный Хром и пара
блокировщиков без настроек. Не грузится контент — мяч на вашей стороне. Думайте
сами, как доставить его через блокировщики. Поставьте их себе и проверьте
локально.&lt;/p&gt;

&lt;p&gt;Ниже типичный встроенный твит моими глазами. Только ошмётки, медиа-контента
нет. Ссылки не работают, пушто Джаваскрипт, который не подгрузился.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/98508450-8cde6a00-2270-11eb-988d-aff3aa0fc198.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всё же нашлась в Медузе светлая голова (причём не обязательно автор
статьи). Кто-то понял, что картинка должна быть картинкой, а не слоём десяти
абстракций (ifame, CORS, JavaScript, etc). Твит можно удалить, заблокировать,
Твиттер прилёг, админ закрыл доступ. Картинка — это снимок объекта в момент
времени. Я увижу объект в том виде даже через десять лет, когда и Твиттер
продадут, и твит пометят как оскорбляющий всех на свете, или ещё что.&lt;/p&gt;

&lt;p&gt;В Твиттере бывает видео, но уже два этих слова в одном предложении — Твиттер и
видео — заставляет меня фыркнуть. Анимированных гифок на 30 секунд не надо;
нормальное видео должно быть на Ютубе.&lt;/p&gt;

&lt;p&gt;Камней в огород заслуживают ребята, которые постят код встроенными гистами. Это
за гранью: вместо того, чтобы вставить код текстом и подсветить каким-нибудь
&lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;, который везде по умолчанию, чел копирует пять
строчек ямла, делает гист, копирует ссылку на &lt;code class=&quot;highlighter-rouge&quot;&gt;iframe&lt;/code&gt; и вставляет в бложик. В
основном так делают на Медиуме, что говорит за себя.&lt;/p&gt;

&lt;p&gt;Вспомнил, что год назад писал в том же ключе про &lt;a href=&quot;/codepic/&quot;&gt;код
картинкой&lt;/a&gt;. Вкратце: не надо ничего внедрять. Если код нужен для
быстрого ознакомления, картинка заходит на ура. Как и твит.&lt;/p&gt;

&lt;p&gt;В общем, в чьей-то голове зажглась лампа: твиты нужно вставлять картинками. Шлю
тому человеку лучи добра и любви. Желаю, чтобы так было всегда и другие
опомнились.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/98508459-8f40c400-2270-11eb-82b3-4f15bd1defdf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tweet-pic/</link>
        <guid isPermaLink="true">https://grishaev.me/tweet-pic/</guid>
        
        <category>life</category>
        
        <category>twitter</category>
        
        
      </item>
    
      <item>
        <title>Возрастное</title>
        <description>&lt;p&gt;С интересом наблюдаю, как с возрастом меняются интересы и привычки. Мне почти
тридцать шесть, и вот что начал замечать: все меньше вещей увлекают меня как
прежде. Я не жалуюсь, а скорее изучаю сам себя.&lt;/p&gt;

&lt;p&gt;Раньше читал кучу ресурсов по RSS. По крайней мере источников двадцать было
точно. Со временем список сократился до двух, другие надоели. То, что они пишут,
либо неинтересно, либо уже пройдено. Либо у меня свое мнение, и лишний раз
деребить душу не хочется.&lt;/p&gt;

&lt;p&gt;Занятно, что чем чаще пишет человек, тем больше этим бесит. О всяких Варламовых,
Лебедевых и Навальных вспоминаю как о страшном сне. Эту дыру не заткнуть, а мне
еще разбираться, какой из двадцати скопившихся постов прочесть. Раз в месяц —
самое то для текущего состояния.&lt;/p&gt;

&lt;p&gt;Не прет почти никакое видео из Ютуба. Выщелкиваю подписки, которые когда-то
ревностно искал. Не представляю, как смотреть чье-то выступление на 50
минут. Для меня это стало за гранью.&lt;/p&gt;

&lt;p&gt;Сюда же попадают всякие подкасты, лекции, митапы, конфы, доклады, эвенты. Мозг
вообще не воспринимает. Ощущение, что льешь воду в полный чайник. Пытался
слушать подкасты — не помню ничего из прослушанного, только что мысленно
подгонял говорящих: ну скорее, не тяни, короче.&lt;/p&gt;

&lt;p&gt;Игры? Когда-то я даже жалел о том, что купил Мак — как теперь играть? Недавно
посмотрел на Ютубе последний Дум. Первая мысль была — почему так однообразно?
Все эти текстуры и дикая графика не прут. Раз в полгода прохожу что-то на
эмуляторе первой Sony PS. При этом пользуюсь перемоткой вперед, чтобы ускорять
медленные сцены.&lt;/p&gt;

&lt;p&gt;Не могу смотреть фильмы длинее двух часов — мука. Еле досидел Нолановский
“Довод”. Если хочу что-то посмотреть, прежде всего проверяю
хронометраж. Боготворю старые мульты Диснея по 80 минут с титрами. От
современных 2:15 просто выворачивает.&lt;/p&gt;

&lt;p&gt;Уже не влекут другие языки программирования. После Кложи нельзя найти язык,
который зацепит с той же силой. Зачем мне условный Golang? Коллега по работе не
знает, как в нем сделать deep merge. У меня это пять строчек. И пусть оно ест в
три раза больше памяти — мои силы важнее. Кроме Кложи, интересуюсь только Common
Lisp-ом. Уйду в него, если с Кложей что-то пойдет не так.&lt;/p&gt;

&lt;p&gt;Раздражает обилие инструментов. Не хочу никаких Кубернетесов — только вчера
Докеру научился. Не хочу всяких солидов, просто дайте словарь и функцию. Хочу
убить тех, кто тянет в проект новые слои абстракций.&lt;/p&gt;

&lt;p&gt;Чем заполнить пустоту, чтобы не остаться в пузыре? Пока что справляюсь
книгами. Чередую технические и нон-фикшен, чтобы не было скучно. Сейчас вот
читаю про Джаву и Чернобыль. В книге ты сам себе барин: если затянуто,
пропускаешь. Нравится — вернулся и пережил заново.&lt;/p&gt;

&lt;p&gt;Удивительным открытием оказалась своя книга. Писать ее полтора года не так
изнурительно, как вести опенсорс или писать по ночам очередной “свой
проект”. Вот такая асимметрия: каждый день пишешь по две страницы и норм, даже
чувствуешь подъем. А после третьей недели кодинга во внеурочное время кажется,
что разваливаешься на части. Болят шея и руки, глаза как помидоры, на любую
мелочь готов убить.&lt;/p&gt;

&lt;p&gt;Опенсорс? Нет, спасибо. Чтобы закрыть ишью в опенсорсе, я взял помощника на
зарплату. Что-то там контрибьютить для меня теперь так тяжело, что просто кричи.&lt;/p&gt;

&lt;p&gt;Такие дела. При всем этом мне, тем не менее, интересно следить за сменой
привычек и восприятия. Посмотрим, что будет дальше.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/getting-older/</link>
        <guid isPermaLink="true">https://grishaev.me/getting-older/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Еще немного книг</title>
        <description>&lt;p&gt;Выкладываю несколько прочитанных книжек. Полную подборку см. &lt;a href=&quot;/bookshelf/&quot;&gt;на книжной
полке&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;book-list&quot;&gt;

    
&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/black-on-red.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Черный о красных. 44 года в Советском Союзе&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Роберт Робинсон&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Автобиография Роберта Робинсона, чернокожего рабочего, который переехал в СССР
            во время Великой депрессии. Робинсон прожил в Союзе почти 45 лет, пережил
            репрессии, войну, доносы и шпионаж. Ближе к старости он все же смог вернуться на
            родину и написал мемуары. Прекрасная книга об СССР: живо, ярко, во всех деталях.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;



&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/freako.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Фрикономика&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Стивен Дабнер, Стивен Левитт&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Серия забавных статей о том, что не все так просто, как кажется на первый
            взгляд. Этакий датамайнинг прошлого века: поиск скрытой информации в массивах
            данных, не очевидные связи между событиями. Книга с юмором, читается легко, удовольствие.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/prav-palach.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Праведный палач. Жизнь, смерть, честь и позор в XVI веке&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Джоэл Харрингтон&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            В основе книги лежит дневник палача Франца Шмидта 16 века. Сквозь этот дневник
            автор описывает средневековую жизнь Германии и Европы в целом. Передает уклад
            различный сословий, общественный порядок и место человека в обществе того
            времени. Рекомендую книгу, потому что она рушит многие мифы о Средних веках.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/jedi-tech.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Джедайские техники&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Максим Дорофеев&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Набор советов о том, как справляться с задачами. Своего рода русский аналог Make
            Time (см. ниже). Местами наивно, но взял парку вещей на заметку.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/prog-clojure.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Программирование на Сlojure&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Чаз Эмерик, Брайан Карпер, Кристоф Гранд&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Первая книга о Сlojure на русском языке, которая вышла еще в 2013
            году. Талмуд на 800 страниц. Материал не устарел, советую прочитать
            и сейчас. Минус в том, что мало полезных примеров, нацеленных на
            практику. Рад, что добрался до этой книги уже с багажом знаний о
            языке.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/elem-clojure.png&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Elements of Сlojure&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Zachary Tellman&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Небольшая книжица о языке. На мой взгляд, слишком абстрактно, трудно
            понять, куда клонит автор. Наиболее полезна вторая часть, где
            обсуждаются правила именования. Полезно, кое-что взял на заметку.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/kafka.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Apache Kafka. Потоковая обработка и анализ данных&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Нархид Ния, Шапира Гвен&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Чтобы каждый раз не материться в работе с Кафкой, купил и прочел
            книжку. Полезно, раскрыто много деталей и тонкостей. К сожалению,
            адский перевод на уровне Гугла пятилетней давности. Держу на полке
            как справочник.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/code.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Код. Тайный язык информатики&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Петцольд Чарльз&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Путешествие в мир компьютеров с самых азов: бинарный код,
            электричество, реле... Только к середине мы доходим до
            сумматора. Лучшая книга чтобы понять, как работает железо на низком
            уровне. Достойный перевод и оформление, особенно схем.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/autor.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Автор, ножницы, бумага&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Николай Кононов&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Набор глав о том, как писать хороший текст. Напоминает
            &quot;Пиши. Сокращай&quot;, но в другом ключе, в том числе
            литературном. Коротко, без воды, достойно внимания.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/icoder.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Идеальный программист. Как стать профессионалом разработки ПО&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Роберт Мартин&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Мемуары и советы Роберта Мартина. Книга не столько о
            программировании, сколько о переговорах и отношениях в
            команде. Пригодится, чтобы понять: даже для программиста общение
            важнее кода.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&quot;book-item&quot;&gt;
    &lt;div class=&quot;book-thumb&quot;&gt;
        &lt;img src=&quot;/assets/static/bookshelf/kreml.jpg&quot; /&gt;
    &lt;/div&gt;
    &lt;div class=&quot;book-text&quot;&gt;
        &lt;p&gt;
            &lt;b&gt;Вся кремлевская рать. Краткая история современной России&lt;/b&gt;
            &lt;br /&gt;
            &lt;em&gt;Михаил Зыгарь&lt;/em&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Основные события России с 2000 по 2015 год и связанные с ними люди
            из Кремля. Книгу прислали в нагрузку с другой покупкой и я даже
            хотел ее выкинуть. Но читать оказалось так приятно, что проглотил за
            неделю, попутно воскрешая в памяти события прошлого и свою реакцию
            на них. Замечательное произведение.
        &lt;/p&gt;

    &lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
        <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/books-read/</link>
        <guid isPermaLink="true">https://grishaev.me/books-read/</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>Баг с почтой на Маке</title>
        <description>&lt;p&gt;Наткнулся на странный баг с почтой. Касается MacOS, Mail.app и Gmail, то есть
когда работаешь с Гугловым ящиком из обычного приложения на Маке. Ситуация: если
долго набирать письмо, то при сохранении черновика на сервере создается новое
письмо в цепочке. Выглядит так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/96000877-0cc70f00-0e40-11eb-9b95-59f8e1aa136f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Напоминает историю коммитов в Гитхабе. Видно, что каждый раз, когда я делал
паузу, на сервере появлялось новое письмо вместо черновика. В результате
образовалась цепочка на 53(!) письма. Они заполняют выдачу в поиске, мешают
переписке.&lt;/p&gt;

&lt;p&gt;Гуглеж показывает, что проблеме уже много лет, и она то появляется, то
исчезает. Переписка в Гугло-группах напоминает синусоиду:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Чел 1: Письма дублируются!&lt;/li&gt;
  &lt;li&gt;Гугл: Починили.&lt;/li&gt;
  &lt;li&gt;(через год) Чел 2: опять дублируются!&lt;/li&gt;
  &lt;li&gt;Гугл: Починили.&lt;/li&gt;
  &lt;li&gt;(через полгода) Чел 3: у меня то же самое!&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На чьей стороне проблема, понять трудно. Скорей всего, при сохранении письма
Mail.app не шлет какой-то айдишник или косячит с параметрами, то есть мячик на
стороне Эпла. Потому что проблемы не было, пока пользовался веб-версией
Gmail. Возможно, сохранение черновика опирается на параметры без документации,
отчего и результат.&lt;/p&gt;

&lt;p&gt;Проблему легко победить. Из верхнего меню пройдите по пути Mail →
Preferences → Accounts. В списке учеток выберите нужную и включите таб
“Mailbox Behaviours”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/96000885-0fc1ff80-0e40-11eb-8df3-a05d9ecf5493.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В поле “Drafts Mailbox” откройте выпадашку, чтобы указать, где хранить
черновики. Укажите последний пункт “Drafts” под секцией “On my Mac”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/96000886-105a9600-0e40-11eb-9e10-ab6f94bf16e2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь черновики будут храниться у вас на компе локально. Для коротких писем
черновики вообще не нужны, а длинные лучше набирать в другой программе.&lt;/p&gt;

&lt;p&gt;Выставил эту опцию для всех Гугловых ящиков, и проблема ушла.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/mail-bug/</link>
        <guid isPermaLink="true">https://grishaev.me/mail-bug/</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>Книга в Читай-Городе</title>
        <description>
&lt;p&gt;Приятная возможность напомнить о книжке: теперь ее можно купить в сети
&lt;a href=&quot;https://www.chitai-gorod.ru/catalog/book/1267534/&quot;&gt;“Читай-Город”&lt;/a&gt;. На подходе “Буквоед”. Спрашивайте везде!&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/book-chitai-gorod/</link>
        <guid isPermaLink="true">https://grishaev.me/book-chitai-gorod/</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>Довод. Название</title>
        <description>&lt;p&gt;Где-то читал, что название Tenet режиссер выбрал потому, что оно читается в обе
стороны. Таким образом он проводит параллель с организацией, которая работает в
обоих временных направлениях. И только недавно, когда шел и думал о чем-то
краешком мозгов, догадался: а ведь русский перевод “довод” тоже читается
наоборот.&lt;/p&gt;

&lt;p&gt;До чего же редкий случай! Нашлось слово, которое не только близко по смыслу к
оригиналу (“принцип”, “догмат”), но и повторяет его семантику. Точное
попадание, победа локализаторов.&lt;/p&gt;

&lt;p&gt;К сожалению, такое редко случается. Например, скоро выходит мультик Soul (в
российском прокате — Душа). К переводу не подкопаешься, но семантика в том, что
в сюжете переплетается загробная жизнь и музыка в стиле соул. То есть в названии
два смысла — человеческая душа и музыка. Тут ничего не попишешь, бери что-то
одно.&lt;/p&gt;

&lt;p&gt;А вот с Доводом зачетно вышло в плане названия. Но про сам фильм — как-нибудь в
другой раз.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tenet-naming/</link>
        <guid isPermaLink="true">https://grishaev.me/tenet-naming/</guid>
        
        <category>tenet</category>
        
        <category>movies</category>
        
        
      </item>
    
      <item>
        <title>Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют</title>
        <description>&lt;h2 id=&quot;Оглавление&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В прошлый раз мы работали с деревом валют, чтобы найти цепочку обмена. Мы нашли
решение задачи, но упомянули, что в особых случаях дерево может получиться
бесконечным. Объясним, как это возможно. Для этого вспомним, как &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;
обходит дерево.&lt;/p&gt;

&lt;p&gt;Алгоритм называется &lt;code class=&quot;highlighter-rouge&quot;&gt;depth first&lt;/code&gt; или обход в глубину. При таком обходе код
стремится в первую очередь вниз, а уже потом — в сторону (в нашем случае
вправо). В этом легко убедиться, если разложить данные на части с помощью
зиппера:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; [2 [3] 4]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; [3]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;p&gt;Значение &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; перед &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; говорят о том, что зиппер идет прежде всего вглубь данных
(внутрь вектора &lt;code class=&quot;highlighter-rouge&quot;&gt;[3]&lt;/code&gt;), и только потом право. Еще более интересен случай с
наивным виртуальным деревом, где у каждого узла потомки &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 2 3]&lt;/code&gt;. При обходе
такого дерева зиппер будет стремиться вниз, каждый раз спускаясь в очередной
вектор &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 2 3]&lt;/code&gt; и становясь на единицу. Покажем это на схеме:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-123&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;constantly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                       ┌───────┐
                       │[1 2 3]│
                       └───────┘
                           │
               ┌───────┐   │
               │[1 2 3]│◀──┘
               └───────┘
                   │
        ┌───────┐  │
        │[1 2 3]│◀─┘
        └───────┘
            │
            │
    ...   ◀─┘

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Поскольку в нашем зиппере нет условия, по которому мы могли бы перестать
производить потомков, их вложенность бесконечна. Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;iter-zip&lt;/code&gt; вернет
бесконечную цепочку локаций, каждая из которых несет единицу. Даже если
ограничить итерацию с помощью &lt;code class=&quot;highlighter-rouge&quot;&gt;(take n)&lt;/code&gt;, это ничего не даст — просто получим N
единиц:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-123&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; (1 1 1 1 1 1 1 1 1 1)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь вернемся к обмену валют. Предположим, банк меняет рубли на доллары,
доллары на евро и евро на рубли. Выразим это в коде:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Читатель заметит, что получился замкнутый круг:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;             ┌───────┐
        ┌───▶│  rub  │────┐
        │    └───────┘    │
        │                 ▼
    ┌───────┐         ┌───────┐
    │  eur  │◀────────│  usd  │
    └───────┘         └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Проблема прошлого решения в том, что оно не учитывает цикличность
правил. Предположим, клиент хочет обменять рубли на лиры. Начнем строить дерево
от рубля. Начало цепочки:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                       ┌───────┐
                       │  rub  │
                       └───────┘
                           │
               ┌───────┐   │
               │  usd  │◀──┘
               └───────┘
                   │
        ┌───────┐  │
        │  eur  │◀─┘
        └───────┘
            │
 ┌───────┐  │
 │  rub  │◀─┘
 └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Так мы снова пришли к рублю. Для него мы снова получим доллар, для доллара евро,
затем рубль. Если продолжить итерацию, мы будем бесконечно погружаться в эту
цепочку.&lt;/p&gt;

&lt;p&gt;Логика подсказывает, что нужно пресечь обход вглубь, если очередная валюта равна
исходной. Проще говоря, у элемента &lt;code class=&quot;highlighter-rouge&quot;&gt;:rub&lt;/code&gt;, который стоит не на вершине, не может
быть потомков. Но проблема в том, что в функциях &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;make-children&lt;/code&gt; мы
не знаем, какое место в дереве занимает элемент. В них приходят чистые значения,
а не локации. Это можно исправить с помощью состояния, например атома, который
хранил бы список валют, которые мы обошли. Но сейчас мы ставим задачу обойтись
без состояния и изменяемых объектов.&lt;/p&gt;

&lt;p&gt;Если еще раз исследовать дерево, то станет ясно: проблема в порядке
обхода. Поскольку мы стремимся вглубь, велика вероятность попасть в кротовую
нору, из которой нельзя выбраться. Нам может и повезти, когда мы удачно шагнули
в ветку с решением, а бесконечная ветка оказалась дальше:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 ┌───────┐
                 │  rub  │
                 └───────┘
                     │
         ┌───────┐   │   ┌───────┐
         │  yen  │◀──┴──▶│  usd  │
         └───────┘       └───────┘
             │               │
 ┏━━━━━━━┓   │               │   ┌───────┐
 ┃  lir  ┃◀──┘               └──▶│  eur  │
 ┗━━━━━━━┛                       └───────┘
                                     │
                                     │   ┌───────┐
                                     └──▶│  rub  │
                                         └───────┘
                                             │
                                             │
                                             └──▶  ...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Однако это везение, и на него нельзя полагаться в решении задач.&lt;/p&gt;

&lt;p&gt;Предположим теперь, что зиппер обходит локации не вглубь, а вширь и вправо. С
таким порядком нам не страшны бесконечные ветки. Если таковая закралась в
дерево, она не оттянет на себя обход. Вместо этого мы спускаемся по этажам
дерева и получим все элементы этого уровня. Даже если один из них пришел из
бесконечной ветви, это не помешает исследовать остальные. Рисунок ниже
показывает, что горизонтальный обход поможет добраться до решения. Вертикальный
обход ушел бы вы бесконечность.&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 ┌───────┐
             ┌───│  rub  │
             │   └───────┘
             ▼
         ┌───────┐       ┌───────┐
         │  yen  │──────▶│  usd  │
         └───────┘       └───────┘
                             │
     ┌───────────────────────┘
     ▼
 ┏━━━━━━━┓                       ┌───────┐
 ┃  lir  ┃──────────────────────▶│  eur  │
 ┗━━━━━━━┛                       └───────┘
                                     │
                                     │   ┌───────┐
                                     └──▶│  rub  │
                                         └───────┘
                                             │
                                             │
                                             └──▶  ...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Проблема в том, что модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt; предлагает только один способ обхода —
в глубину с помощью &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;. Другого алгоритма не предусмотрено. Мы напишем
свою функцию, чтобы обойти зиппер “послойно”. Говоря иначе, для дерева&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            ┌───────┐
  1                         │   1   │
                            └───────┘
                                │
              ┌───────┐         │         ┌───────┐
  2           │   2   │◀────────┴────────▶│   3   │
              └───────┘                   └───────┘
                  │                           │
      ┌───────┐   │   ┌───────┐   ┌───────┐   │   ┌───────┐
  3   │   4   │◀──┴──▶│   5   │   │   6   │◀──┴──▶│   7   │
      └───────┘       └───────┘   └───────┘       └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;мы получим слои:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, при этом каждый элемент слоя будет не примитивом, а локацией. Это значит,
элемент помнит свое положение в дереве, от него можно переходить к другим
элементам, получит его путь и так далее.&lt;/p&gt;

&lt;p&gt;Для начала нужна функция, которая вернет дочерние локации исходной. Ее логика
проста: если от локации можно сдвинуться вниз, то двигаемся вправо до тех пор,
пока не упремся в пустоту.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when-let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-child&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-child&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take-while&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Обратите внимание, что это не то же самое, что &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/children&lt;/code&gt;. Последняя вернет
дочерние элементы, а не локации, а нам нужны именно локации. Сравните выражения:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pnodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ppath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pnodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ppath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pnodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ppath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Во втором случае получили локации, в то время как &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/children&lt;/code&gt; просто
 обращается к функции для нахождения потомков, которую передали в зиппер.&lt;/p&gt;

&lt;p&gt;Предположим, что для некоторой локации &lt;code class=&quot;highlighter-rouge&quot;&gt;loc-children&lt;/code&gt; вернула список
потомков. Чтобы спуститься на уровень ниже, нужно найти потомков каждого из них
и объединить результат. Проще всего это это сделать выражением:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, где &lt;code class=&quot;highlighter-rouge&quot;&gt;locs&lt;/code&gt; — список локаций очередного уровня. Если передать в &lt;code class=&quot;highlighter-rouge&quot;&gt;locs&lt;/code&gt; новый
уровень, продвинемся еще дальше, и так до тех пор, пока не получим пустую
последовательность. Все вместе дает нам функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;loc-layers&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mapcat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take-while&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Она принимает корневую локацию, от которой начинается итерация по слоям. В
первом слое вектор из одной локации, затем его потомки, затем потомки потомков и
так далее. Быстрая проверка:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; ([[[[1]]] 2 [[[3]]] 3])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; ([[[1]]] 2 [[[3]]] 3)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; ([[1]] [[3]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; ([1] [3])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; (1 3)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы получить цепочку, где элементы идут вширь и вправо, сцепим слои с помощью
&lt;code class=&quot;highlighter-rouge&quot;&gt;concat&lt;/code&gt;. Эта функция не понадобится в решении задачи, но может оказаться
полезной:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-seq-layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loc-layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вернемся к обмену валют. Подберем правила обмена так, чтобы в них были
циклические зависимости. Зиппер останется прежним: он точно так же строит дерево
обмена при помощи локальной функции &lt;code class=&quot;highlighter-rouge&quot;&gt;get-children&lt;/code&gt;, которая замкнута на
правилах.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Изменится стиль работы с этим зиппером. Теперь мы итерируем его с помощью не
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;, а нашей &lt;code class=&quot;highlighter-rouge&quot;&gt;loc-layers&lt;/code&gt;. На каждом шаге мы получим слои обмена. Наша
задача — найти в очередном слое локации, чей узел равен конечной валюте. Как
только мы нашли хотя бы одну, задача решена. Останется только вычислить до них
путь.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exchange2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;letfn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loc-to?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find-locs-to&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-to?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;exchange&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keyword?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get-children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                             &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find-locs-to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-&amp;gt;exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Заметим, что теперь не нужно сравнивать длины цепочек: если локации из одного
уровня, число шагов до них одинаково. По условию задачи мы заинтересованы в
самых коротких вариантах обмена. Это значит, что если на третьем уровне нашлась
одна цепочка, а на четвертом их пять, последние нам не интересны — мы завершаем
обход на третьем слое.&lt;/p&gt;

&lt;p&gt;Примеры обмена:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exchange2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exchange2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:usd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:rub&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exchange2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lir&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:eur&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:din&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Решение все еще не идеально. Если указать пару валют, для которых нет цепочки,
получим бесконечный цикл. Чтобы пресечь его, ограничьте число слоев каким-то
разумным числом, например пятью. С точки зрения финансов, обмен валюты с таким
числом промежуточных операций скорей всего будет невыгодным, а потому лишен
смысла. Технически это значит добавить форму &lt;code class=&quot;highlighter-rouge&quot;&gt;(take N)&lt;/code&gt; сразу после
&lt;code class=&quot;highlighter-rouge&quot;&gt;loc-layers&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-layers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find-locs-to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-&amp;gt;exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь для неверной пары получим пустой результат:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exchange2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rules2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tug&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:yen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Задачу можно развить еще дальше. Например, для каждой цепочки считать издержки и
комиссию за операцию. Для этого в вектор &lt;code class=&quot;highlighter-rouge&quot;&gt;[:from :to]&lt;/code&gt; добавим обменный курс и
вознаграждение. В зависимости от того, на чьей мы стороне — клиента или банка —
будем предлагать самые затратные или оптимальные обмены. Предлагаем читателю
придумать свои вариации к этой задаче. На этом мы закончим с валютами и двинемся
дальше.&lt;/p&gt;

&lt;p&gt;В этом главе мы рассмотрели, как порядок обхода влияет на решение задачи. В
разных случаях применяют методы в глубину и в ширину. Это важно для бесконечных
деревьев, когда алгоритм может зациклиться при обходе. В поставке &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt;
нет обхода вширь, но легко написать функцию для нарезки зиппера
слоями. Возможно, &lt;code class=&quot;highlighter-rouge&quot;&gt;loc-layers&lt;/code&gt; пригодится вам в других случаях, связанных с
графами и вершинами.&lt;/p&gt;

&lt;p&gt;(Продолжение следует)&lt;/p&gt;

&lt;h2 id=&quot;Оглавление-1&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-zippers-7/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-zippers-7/</guid>
        
        <category>clojure</category>
        
        <category>zippers</category>
        
        
      </item>
    
  </channel>
</rss>
