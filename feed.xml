<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Jul 2020 12:40:54 +0000</pubDate>
    <lastBuildDate>Sun, 19 Jul 2020 12:40:54 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Зипперы в Clojure (часть 2). Автонавигация</title>
        <description>&lt;h2 id=&quot;Оглавление&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Итак, мы разобрались с тем, как перемещаться по коллекции. Однако у читателя
возникнет вопрос: откуда приходит путь? Как мы узнаем заранее, в каком
направлении двигаться?&lt;/p&gt;

&lt;p&gt;Выскажем тезис, который по праву считается главным во всей главе. &lt;strong&gt;Ручная
навигация по данным лишена всякого смысла.&lt;/strong&gt; Если путь известен заранее, вам не
следует использовать зиппер — это лишнее усложнение.&lt;/p&gt;

&lt;p&gt;Дело в том, что Clojure предлагает более эффективный способ добраться до
вложенных данных с известной структурой. Если мы точно знаем, что на вход
поступил вектор, второй элемент которого вектор, обратимся к get-in:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;p&gt;То же самое касается других типов данных. Неважно, какую какую комбинацию
образуют списки и словари: если структура известна заранее, до нужных данных
легко добраться с помощью &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt; иди стрелочного оператора. В данном случае
зипперы совершенно не нужны.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В чем же тогда преимущество зипперов? Свои сильные стороны они проявляют там,
где не может работать &lt;code class=&quot;highlighter-rouge&quot;&gt;get-in&lt;/code&gt;. Речь о данных с неизвестной
структурой. Представьте, что на вход поступил произвольный вектор, и нужно найти
в нем строку. Она может быть на поверхности вектора, а может быть вложена на три
уровня. Другой пример — XML-документ. Нужный тег может располагаться где угодно,
и нужно как-то его найти. Другими словами, идеальный случай для зиппера —
нечеткая структура данных, о которой у нас только предположение.&lt;/p&gt;

&lt;p&gt;Функции &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/up&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/down&lt;/code&gt; и другие образуют универсальную &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;. Эта
функция передвигает указатель так, что рано или поздно мы обойдем всю
структуру. При обходе исключены повторы: мы побываем в каждом месте только один
раз. Пример с вектором:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; [1 [2 3] 4]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; [2 3]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Очевидно, мы не знаем, сколько раз вызывать &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;, поэтому пойдем на
хитрость. Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt; принимает функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; и значение &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;. Результатом
станет последовательность, где первый элемент &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;, а каждый следующий — &lt;code class=&quot;highlighter-rouge&quot;&gt;f(x)&lt;/code&gt;
от предыдущего. Для зиппера мы получим исходную локацию, затем &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; от
нее, затем &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; от прошлого сдвига и так далее.&lt;/p&gt;

&lt;p&gt;Ниже переменная &lt;code class=&quot;highlighter-rouge&quot;&gt;loc-seq&lt;/code&gt; это цепочка локаций исходного зиппера. Чтобы получить
узлы, мы берем шесть первых элементов (число взяли случайно) и вызываем для
каждого &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/node&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Iterate&lt;/code&gt; порождает &lt;em&gt;ленивую&lt;/em&gt; и &lt;em&gt;бесконечную&lt;/em&gt; последовательность. Обе
характеристики важны. Ленивость означает, что очередной сдвиг (вызов &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;)
не произойдет до тех пор, пока вы не дойдете до элемента в обработке
последовательности. Бесконечность означает, что &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; вызывается
неограниченное число раз. Понадобится признак, по которому мы остановим вызов
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;, иначе обработка узлов никогда не закончится.&lt;/p&gt;

&lt;p&gt;Пример ниже показывает, что в какой-то момент &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; перестанет сдвигать
указатель. Добавьте или удалите &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;, результат будет одинаков:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; устроена по принципу кольца. После последней локации она
перейдет на корневую и цикл завершится. При этом корневая локация получит
признак завершения, и дальнейший вызов &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; ничего не даст. Проверить
признак можно функцией &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/end?&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-end&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/end?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы получить все локации, будем брать их до тех пор, пока локация не
конечна. Все вместе дает следующую функцию:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take-while&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;complement&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/end?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Эта функция вернет все локации в структуре данных. Напомним, что локация хранит
узел данных, который можно извлечь с помощью &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/node&lt;/code&gt;. Пример ниже показывает,
как превратить локации в данные:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Теперь когда мы получили цепочку локаций, напишем поиск. Предположим, нужно
проверить, есть ли в векторе кейворд &lt;code class=&quot;highlighter-rouge&quot;&gt;:error&lt;/code&gt;. Напишем предикат для локации:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-error?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Осталось проверить, если ли среди локаций та, чей узел равен &lt;code class=&quot;highlighter-rouge&quot;&gt;:error&lt;/code&gt;. Для этого
подойдет &lt;code class=&quot;highlighter-rouge&quot;&gt;some&lt;/code&gt; с нашим предикатом:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-error?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Заметим, что из-за ленивости мы не сканируем все дерево. Если нужный узел
нашелся на середине, &lt;code class=&quot;highlighter-rouge&quot;&gt;iter-zip&lt;/code&gt; обрывает итерацию, и дальнейшие вызовы
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; не срабатывают.&lt;/p&gt;

&lt;p&gt;Будет полезно знать, что &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt; обходит дерево в глубину. При движении он
стремится вниз и вправо, а наверх поднимается лишь когда шаги в эти стороны
возвращают nil. Как мы увидим дальше, в некоторых случаях порядок обхода
важен. Попадаются задачи, где мы должны двигаться вширь. По умолчанию в
&lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt; нет других вариантов обхода, но мы легко напишем
собственный. Позже мы рассмотрим задачу, где понадобится обход вширь.&lt;/p&gt;

&lt;p&gt;Напишем свой зиппер для обхода вложенных словарей, например таких:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map-data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:word&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:nested&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;За основу возьмем стандартный &lt;code class=&quot;highlighter-rouge&quot;&gt;vector-zip&lt;/code&gt; для векторов. Зипперы похожи, разница
лишь в типе коллекции. Подумаем, как задать функции-ответы на вопросы. Сам по
себе словарь — это ветка, чью потомки — элементы &lt;code class=&quot;highlighter-rouge&quot;&gt;MapEntry&lt;/code&gt;. Последний тип это
пара ключа и значения. Если значение — словарь, получим из него цепочку
вложенных &lt;code class=&quot;highlighter-rouge&quot;&gt;MapEntry&lt;/code&gt; и так далее. В Clojure нет встроенного предиката на
проверку &lt;code class=&quot;highlighter-rouge&quot;&gt;MapEntry&lt;/code&gt;, поэтому напишем его:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;instance?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.lang.MapEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Зиппер &lt;code class=&quot;highlighter-rouge&quot;&gt;map-zip&lt;/code&gt; выглядит так:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;entry?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;При обходе дерева вы получите все пары ключей и значений. Если значение —
вложенный словарь, мы провалимся в него при обходе. Пример:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:user/name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:user/name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:user/name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Многоточие выше заменяет исходный словарь. Чаще всего мы не интересуемся
корневым элементом, поэтому в конец стрелочного оператора можно добавить &lt;code class=&quot;highlighter-rouge&quot;&gt;rest&lt;/code&gt;,
чтобы отбросить его.&lt;/p&gt;

&lt;p&gt;С помощью этого зиппера можно проверить, есть ли в словаре ключ &lt;code class=&quot;highlighter-rouge&quot;&gt;:error&lt;/code&gt; со
значением &lt;code class=&quot;highlighter-rouge&quot;&gt;:auth&lt;/code&gt;. Сами по себе эти кейворды могут быть где угодно — и в ключах,
и в значениях на любом уровне. Однако нас интересует их комбинация. Для этого
напишем предикат:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-err-auth?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Убедимся, что в первом словаре нет пары, даже не смотря на то, что значения
встречаются по отдельности:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:response&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:expired&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-err-auth?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И что их пара будет найдена:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:response&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-err-auth?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;На практике мы работаем с комбинацией векторов и словарей. Напишите свой зиппер,
который при обходе учитывает и словарь, и вектор.&lt;/p&gt;

&lt;p&gt;(Продолжение следует)&lt;/p&gt;

&lt;h2 id=&quot;Оглавление-1&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-zippers-2/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-zippers-2/</guid>
        
        <category>clojure</category>
        
        <category>zippers</category>
        
        
      </item>
    
      <item>
        <title>Зипперы в Clojure (часть 1). Азы навигации</title>
        <description>&lt;h2 id=&quot;Оглавление&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;В этой статье мы познакомимся с зипперами в языке Clojure. Это необычный способ
работы с коллекциями. С помощью зиппера можно обойти и изменить произвольные
данные, а также выполнить в них поиск. Зиппер — мощный инструмент для работы с
данными. Однако он не так прост, как обычная итерация, и требует подготовки.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Объясним зиппер простыми словами. Это обертка над данными, которая предлагает
универсальные действия над ними. Перечислим основные действия:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;перемещение по глубине: вниз к потомкам или вверх к родителю;&lt;/li&gt;
  &lt;li&gt;перемещение по ширине: влево или вправо среди потомков;&lt;/li&gt;
  &lt;li&gt;обход всей структуры данных;&lt;/li&gt;
  &lt;li&gt;добавление, редактирование и удаление узлов.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;p&gt;Это неполный список, и наиболее интересные решения мы раскроем по ходу
текста. Подчеркнем, что эти возможности доступны произвольным коллекциям. Из-за
этого зипперы становятся мощным инструментом для работы с данными. Разобраться с
ними означает повысить свои навыки и открыть новые двери.&lt;/p&gt;

&lt;p&gt;Хорошая новость в том, что зипперы доступны в базовой поставке Clojure. Это не
сторонняя библиотека, которую нужно подключать. Поэтому зипперы легко добавить в
проект, не опасаясь проблем лицензии или новых зависимостей.&lt;/p&gt;

&lt;p&gt;Зипперы в Clojure используют мощь неизменяемых коллекций. Технически зиппер —
это коллекция, которая хранит оригинал и положение указателя в нем. Все вместе
это называется положением или &lt;em&gt;локацией&lt;/em&gt; (location). Шаг в любую сторону вернет
новую локацию подобно тому, как функции assoc или update производят новые данные
на базе старых.&lt;/p&gt;

&lt;p&gt;Из текущей локации можно получить &lt;em&gt;узел&lt;/em&gt; (ноду) — часть данных, на которые
ссылается указатель. На этом моменте путаются новички, поэтому уточним
различие. Локация — это исходные данные и положение в них. Передвижение по
локации порождает локацию. Из локации можно извлечь узел — данные, которые
встретились на этом участке.&lt;/p&gt;

&lt;p&gt;Приведем пример с вектором &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 2 3]&lt;/code&gt;. Чтобы переместиться на &lt;strong&gt;двойку&lt;/strong&gt;, нужно
выполнить команды &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/down&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/right&lt;/code&gt;. С первым шагом мы провалимся в
вектор и окажемся на единице. Шаг вправо сдвинет нас на двойку. Выразим это в
коде: подключим пакет под псевдонимом &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; и переместимся по вектору:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Цепочка из этих функций вернет двойку, как и ожидалось. Последнее действие
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/node&lt;/code&gt; выводит значение (узел) из текущей локации. Если убрать &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/node&lt;/code&gt;,
получим локацию, которая соответствует двойке. Выглядит она так:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:l&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pnodes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ppath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Наверняка у вас возникли вопросы: откуда мы знаем путь и что произойдет, если мы
вышли за пределы коллекции? Мы ответим на них ниже. Если вам что-то непонятно,
не впадайте в панику: мы еще не раз обсудим все, что здесь происходит.&lt;/p&gt;

&lt;p&gt;Итак, зиппер предлагает перемещение по данным. Несмотря на всю мощь, он не
знает, как это делать в конкретном случае, поэтому его нужно научить. Кроме
входных данных, зиппер требует ответы на два вопроса:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Как узнать, является ли текущий элемент веткой (branch)? Веткой называют
элемент, из которого можно извлечь другие элементы.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Если это ветка, то как извлечь из нее потомков?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вот все, что нужно знать зипперу для навигации. Заметим, что для редактирования
зиппера нужен ответ на еще один вопрос — как присоединить потомков к
ветке. Однако сейчас мы рассматриваем только навигацию, и третий вопрос
подождет.&lt;/p&gt;

&lt;p&gt;В техническом плане ответы это функции. Первая принимает узел и возвращает
истину или ложь. Если была истина, зиппер вызовет вторую функцию. Она принимает
тот же узел, но на этот раз должна вернуть последовательность дочерних узлов или
nil, если их нет.&lt;/p&gt;

&lt;p&gt;Чтобы получить зиппер, нужно сообщить ему исходные данные и две функции для
ветки и потомков. До тех пор, пока мы только читаем зиппер, третья функция может
быть nil. Зипперы живут в пакете &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt;. Подключите его в пространство,
как делали это выше:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my.project&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В свободное время исследуйте &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/clj/clojure/zip.clj&quot;&gt;исходный код&lt;/a&gt; этого модуля. Он занимает
всего 280 строк!&lt;/p&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/zipper&lt;/code&gt; порождает зиппер из функций и исходных данных. Это
центральная точка модуля, его строительный материал. Для частых случаев модуль
предлагает уже готовые зипперы, которым нужно передать только данные. На роль
примера подходит &lt;code class=&quot;highlighter-rouge&quot;&gt;vector-zip&lt;/code&gt; для вложенных векторов. Приведем его код в
сокращении:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipper&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vector?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Третий параметр мы заменили на многоточие. Это функция, которая порождает ветку
из дочерних узлов — вопрос, который пока что обходим стороной. Если передать в
&lt;code class=&quot;highlighter-rouge&quot;&gt;vector-zip&lt;/code&gt; вектор &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 2 3]&lt;/code&gt;, произойдет следующее.&lt;/p&gt;

&lt;p&gt;Зиппер обернет вектор и выставит указатель на него самого. Из начального
положения можно проследовать только вниз, потому что у вектора нет родителя
(вверх) и соседей (влево и вправо). При смещении &lt;strong&gt;вниз&lt;/strong&gt; зиппер сначала
проверит, что текущий узел — ветка. Сработает выражение &lt;code class=&quot;highlighter-rouge&quot;&gt;(vector? [1 2 3])&lt;/code&gt;, что
вернет истину. В этом случае зиппер выполнит &lt;code class=&quot;highlighter-rouge&quot;&gt;(seq [1 2 3])&lt;/code&gt;, чтобы получить
потомков. Ими станет последовательность &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 2 3)&lt;/code&gt;. Как только потомки найдены,
зиппер установит указатель на крайний левый потомок.&lt;/p&gt;

&lt;p&gt;Покажем это на схеме. Начальная позиция, указатель на исходных данных:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                ┌───────┐
                │  nil  │
                └───────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │  nil  │◀───┃  [1 2 3]  ┃───▶│  nil  │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │   1   │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Шаг вниз, указатель на единице:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                ┌───────┐
                │[1 2 3]│
                └───────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │  nil  │◀───┃     1     ┃───▶│   2   │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Шаг вправо, указатель на двойке:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                ┌───────┐
                │[1 2 3]│
                └───────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   1   │◀───┃     2     ┃───▶│   3   │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Мы находимся на двойке и можем двигаться в горизонтальной плоскости, например,
вправо. Еще один шаг вправо сдвинет нас на тройку, обратно влево – на
единицу. Вот как это выглядит в коде:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;При попытке сдвинуться вниз зиппер выполнит предикат &lt;code class=&quot;highlighter-rouge&quot;&gt;(vector? 2)&lt;/code&gt;. Результат
будет ложью, что значит, что текущий элемент не ветка, а лист, и движение вниз
запрещено.&lt;/p&gt;

&lt;p&gt;При передвижении нужно учитывать следующее. Каждый шаг порождает новую локацию,
не изменяя старую. Если вы сохранили в переменную некоторое положение, вызовы
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/down&lt;/code&gt; и другие никак ее не изменят. Из этого следует, что
зипперы сочетаются со стрелочным оператором &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;. Следующая цепочка привет нас
обратно в двойку:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;При ручном передвижении велики шансы выйти за пределы коллекции. Шаг вникуда
вернет nil вместо локации:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Это сигнал, что вы идете по неверному маршруту. Проблема в том, что из nil
нельзя вернуться на прежнее место. Nil означает пустую локацию, и в ней нет
ссылки на прежний шаг. Для пустой локации функции &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/up&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/right&lt;/code&gt; и другие
вернут nil, что означает, что вы будете топтаться на месте.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Исключение составляет функция &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/down&lt;/code&gt;: при попытке спуститься из nil вы
получите исключение &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;. Это недочет, который забыли
исправить в исходном коде.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/left&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Execution error (NullPointerException)...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Рассмотрим случай с более сложным вектором. Один из его потомков — другой
вектор: &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 [2 3] 4]&lt;/code&gt;. Чтобы переместить указатель на &lt;strong&gt;тройку&lt;/strong&gt;, выполним шаги
“вниз”, “вправо”, “вниз”, “вправо”. Сохраним локацию в переменную:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Серия рисунков, которая показывает, что происходит на каждом шаге. Исходная
позиция:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                ┌───────┐
                │  nil  │
                └───────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │  nil  │◀───┃[1 [2 3] 4]┃───▶│  nil  │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │   1   │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Шаг вниз:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │[1 [2 3] 4]│
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │  nil  │◀───┃     1     ┃───▶│ [2 3] │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вправо:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │[1 [2 3] 4]│
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   1   │◀───┃   [2 3]   ┃───▶│   4   │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │   2   │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вниз:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │   [2 3]   │
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   1   │◀───┃     2     ┃───▶│   3   │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вправо (мы у цели):&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │   [2 3]   │
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   2   │◀───┃     3     ┃───▶│  nil  │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы перейти на &lt;strong&gt;четверку&lt;/strong&gt; из текущей позиции, сначала поднимемся
вверх. Указатель сдвинется на вектор [2 3]. В этот момент мы находимся среди
потомков исходного вектора и можем перемещаться по горизонтали. Сделаем шаг
вправо и окажемся на цифре 4.&lt;/p&gt;

&lt;p&gt;Текущая локация:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │   [2 3]   │
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   2   │◀───┃     3     ┃───▶│  nil  │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Шаг вверх:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │[1 [2 3] 4]│
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │   1   │◀───┃   [2 3]   ┃───▶│   4   │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │   2   │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Шаг вправо:&lt;/p&gt;

&lt;div class=&quot;asciichart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;              ┌───────────┐
              │[1 [2 3] 4]│
              └───────────┘
                    ▲
                    │
 ┌───────┐    ┏━━━━━━━━━━━┓    ┌───────┐
 │ [2 3] │◀───┃     4     ┃───▶│  nil  │
 └───────┘    ┗━━━━━━━━━━━┛    └───────┘
                    │
                    ▼
                ┌───────┐
                │  nil  │
                └───────┘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Исходный вектор может быть любой вложенности. Ради интереса замените 3 на еще
один вектор и спуститесь в него.&lt;/p&gt;

&lt;p&gt;Что случится, если передать в &lt;code class=&quot;highlighter-rouge&quot;&gt;vector-zip&lt;/code&gt; что-то отличное от вектора?
Предположим, nil, строку или число. Перед тем, как двигаться, зиппер проверяет,
подходит ли узел на роль ветки и можно ли извлечь из него потомков. Для
&lt;code class=&quot;highlighter-rouge&quot;&gt;vector-zip&lt;/code&gt; проверка выполняется с помощью функции &lt;code class=&quot;highlighter-rouge&quot;&gt;vector?&lt;/code&gt;, которая вернет
nil для всех отличных от вектора значений. В результате получим локацию, из
которой нельзя шагнуть никуда: ни вниз, ни в стороны. Это тупиковый случай, и
его нужно избегать.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/vector-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt; предлагает и другие встроенные зипперы. Особенно интересен
xml-zip для навигации по XML-дереву. Мы обсудим его отдельно, когда читатель
познакомится с другими свойствами зипперов.&lt;/p&gt;

&lt;p&gt;(Продолжение следует)&lt;/p&gt;

&lt;h2 id=&quot;Оглавление-1&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-zippers-1/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-zippers-1/</guid>
        
        <category>clojure</category>
        
        <category>zippers</category>
        
        
      </item>
    
      <item>
        <title>Книга для читалки и телефона</title>
        <description>
&lt;p&gt;Рад сообщить, что теперь книга поддерживает устройства с небольшими экранами —
читалки и телефоны. Чтобы добыть эту версию книжки, перейдите на ее страницу в
&lt;a href=&quot;https://gum.co/ZcEET&quot;&gt;Gumroad&lt;/a&gt;. Если вы делали предзаказ, введите код, который я сообщил в
письме (а если не сообщил, пинганите). Если вы до этого купили бандл, Gumroad
позволит скачать новую версию бесплатно.&lt;/p&gt;

&lt;p&gt;В дополнение к печатной версии и для планшета вы получите PDF-файлы для читалки
и телефона. У них меньший размер страницы и максимально срезаны поля. Версия для
телефона вытянута по вертикали, чтобы уместиться на шестидюймовых
моделях. Впрочем, телефоны сегодня самых разных форматов, и возможно, под ваш
зайдет версия для читалки.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Этой работой я горжусь особо. Адаптировать печатный вариант под маленький
экранчик было трудно. Алексей Шипилов проделал колоссальную работу. Во-первых,
прошел по всей книге и отформатировал код так, чтобы он влез без переносов. Для
этого где-то сокращали имена переменных, где-то разбивали код на части, словом —
импровизировали.&lt;/p&gt;

&lt;p&gt;Во-вторых, боролись с переносами в длинных терминах, например
&lt;code class=&quot;highlighter-rouge&quot;&gt;FileNotFoundException&lt;/code&gt;. С точки зрения LaTeX это неделимое слово, и приходилось
вставлять распорки. Наконец, добавили множество условных тегов, что если билд
под мобильную версию, то подключить пакеты, переопределить макросы и многое
другое. На адаптацию ушел почти месяц непрерывной работы.&lt;/p&gt;

&lt;p&gt;В результате получилась книжка, которую удобно читать с малого девайса. По этой
же причине новые версии идут в PDF. Я не доверяю разным epub и fb2, где под
капотом HTML и CSS. Это прекрасные форматы для художественного текста, где нет
кода и сложной верстки. Однако для технической литературы они ужасны — код
рвется, все плывет. PDF, при всех его недостатках, обладает решающим аргументом
— читатель увидит его в том же виде, что и разработчик.&lt;/p&gt;

&lt;p&gt;Фотографии с реальных устройств. За основу я брал старенький &lt;a href=&quot;/tag/kindle/&quot;&gt;Kindle&lt;/a&gt; и
телефон сына Samsung A6 Plus. Да, девайсы пыльные и с битым экраном, но у вас
такие же, поэтому что выпендриваться.&lt;/p&gt;

&lt;p&gt;Шрифт хорошо читается:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761823-ca7b3b00-c81a-11ea-8897-f39f8baa1b33.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Код влезает на страницу без переносов. Там, где они есть, переносы выполнены
вручную, чтобы попасть в удобное место.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761855-d49d3980-c81a-11ea-9b2c-3f3f080d69a0.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В PDF расставлены ссылки и метки глав. Если нажать на Go To, открывается список
закладок. Жаль только, что плоский, без иерархии. Впрочем, это зависит от
устройства.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761849-d2d37600-c81a-11ea-8857-3373adefe38b.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еще картинки:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761853-d404a300-c81a-11ea-933a-97d0cc6e76f2.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761846-d23adf80-c81a-11ea-9a89-8bf38156d388.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761832-cc44fe80-c81a-11ea-9ffa-659bc7ed8c29.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/87761823-ca7b3b00-c81a-11ea-8897-f39f8baa1b33.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Закачайте годноту на устройства, чтобы читать в очереди, самолете, в парке.&lt;/p&gt;

&lt;script src=&quot;https://gumroad.com/js/gumroad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a class=&quot;gumroad-button&quot; href=&quot;https://gum.co/ZcEET&quot; target=&quot;_blank&quot;&gt;Купить&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/book-mobile/</link>
        <guid isPermaLink="true">https://grishaev.me/book-mobile/</guid>
        
        <category>book</category>
        
        <category>mobile</category>
        
        
      </item>
    
      <item>
        <title>Что там с рассылкой — 1</title>
        <description>&lt;p&gt;Основная часть книг разослана, и некоторые читатели их уже получили. Этот пост
касается случаев, когда вы сделали заказ, но книги нет.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вы получили письмо с темой “Книга выслана: xxxxxxxx”, но код не отслеживается&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Это мой косяк. Дело в в том, что код из заголовка на самом деле не трек-код, а
номер заказа в системе saferoute.ru. Чтобы узнать код службы, которая будет
доставлять книжку, &lt;a href=&quot;https://saferoute.ru/#tracking&quot;&gt;пройдите по ссылке&lt;/a&gt; и введите номер заказа. В
следующем окне вы увидите службу доставки и ее трек номер.&lt;/p&gt;

&lt;p&gt;Некоторые агрегаторы вроде gdeposylka.ru по номеру заказа находят конечную
службу и трек-номер, но это работает в половине случаев. Извините, что так
вышло.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вы из Беларуси, но письма не было&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Издательство сообщило, что в системе СДЕК произошел сбой с отправкой в этом
направлении. Сейчас все налажено, в четверг мне скажут треки, и я сообщу вам.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вы из России, но письма не было&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Тут два варианта — либо книг из первого тиража не хватило, либо вы попросили
книгу с подписью. Если первый вариант, ждем неделю, пока напечатают следующий (я
уже заказал). Если второй вариант, то мне пришлось ждать, пока книжка придет от
издательства ко мне. Получил буквально вчера, отправлю на этой неделе, треки
скину.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вы из-за границы (не Россия, не Беларусь)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Издательство не доставляет за рубеж, это буду делать я. Все аналогично — на этой
неделе начну отправку Почтой России, треки скину. Текущей партии на всех не
хватит, кому-то придется ждать второго тиража.&lt;/p&gt;

&lt;p&gt;Надеюсь, все получат свои книги. Если что, пишите, разберемся.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/book-mailing-1/</link>
        <guid isPermaLink="true">https://grishaev.me/book-mailing-1/</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>О дизайне и Dropbox</title>
        <description>&lt;p&gt;&lt;a href=&quot;/dropbox-ui/&quot;&gt;Вчерашний пост о Dropbox&lt;/a&gt; был лишь затравкой. Я поработал с новым
клиентом и подкопил интересный материал. Не столько про сам Дропбокс, сколько
про дизайн в целом. Итак, поговорим о дизайне.&lt;/p&gt;

&lt;p&gt;Многие из нас рассуждают о дизайне: этот хороший, а тут плохой. У Эпла красиво,
у Андроида страшно. Вопрос, который меня беспокоит: если отбросить привычки и
инфантильные термины вроде “плохо” и “хорошо”, то как можно судить о дизайне?
Мне кажется, я знаю ответ. Назовем удачным тот дизайн, где каждый элемент
&lt;em&gt;приносит пользу&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Заметим, что определение ничего не говорит о цвете кнопки или размере
шрифта. Оно одинаково подходит к сайту, книге или радиоприемнику. Все три
изделия состоят из элементов. В хорошем дизайне каждый элемент отвечает на
вопросы “что ты здесь делаешь” и “какую пользу несешь”.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Очевидно, чем больше пользы у элемента, тем прочнее его позиция в
изделии. Правило можно перевернуть: искать не самые главные элементы, а
исключать те, что не отвечают на поставленные вопросы. Так мы вычленим главное в
продукте, только с другого конца.&lt;/p&gt;

&lt;p&gt;Откроем разворот книги. Кроме текста мы видим номер страницы и колонтитулы. В
них название книги, имя автора или текущая глава. Номер страницы бывает в
кружочке, с подчеркиванием или виньетками. Блок текста обрамляют рамки.&lt;/p&gt;

&lt;p&gt;У меня много вопросов к такому дизайну. Зачем указывать имя автора или книги на
каждой странице? Если читатель взял книгу в первый раз, наверняка он сначала
посмотрел на обложку. Если не в первый раз, напоминать об этом бессмысленно.&lt;/p&gt;

&lt;p&gt;Зачем писать название главы или раздела? Эти данные пригодятся только для текста
со сложной структурой — словари, справочники и руководства. Прием подходит для
фрагментированного текста, например, сборника рассказов. В остальных случаях имя
главы не несет полезной информации.&lt;/p&gt;

&lt;p&gt;А дальше вы поняли. Зачем рамка вокруг текста? Зачем брать номер страницы в
кружок? Для чего эта кнопка? Зачем делать выпадающий элемент, если в нем всего
два пункта, и их можно расположить на месте? Вот так, слой за слоем, отлетает
шелуха, и получается удобный дизайн. Его можно полировать, “играть со шрифтами”,
ну суть не меняется. Нужные элементы на месте, лишние убираем.&lt;/p&gt;

&lt;p&gt;С этими рассуждениями переходим к дизайну Dropbox. Его окно как есть:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86610024-6c965a00-bfb5-11ea-8080-df0e297a5b4e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Первый вопрос: в противоположных углах я вижу две свои аватары. Почему их две?
Очевидно, виджет с лицом управляет пользователем. Почему эта функциональность
разбита на два виджета?&lt;/p&gt;

&lt;p&gt;Давайте нажмем на каждое лицо. Нижнее открывает выпадашку, где видно только мою
почту, и больше ничего:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86782374-a6279d80-c067-11ea-858f-945dc83b0411.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Верхнее открывает блок с более крупным лицом и надписью Owner. Больше ничего.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86782369-a4f67080-c067-11ea-9211-737c51e8be4a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Предположу, что нижний (левый) виджет нужен, чтобы переключаться между
командами, а правый (верхний) – чтобы управлять учетной записью. Наверное,
таков был замысел творца, и может быть, кто-то этим пользуется. Но в моем случае
оба виджета бесполезны.&lt;/p&gt;

&lt;p&gt;Давайте посмотрим на левую панель. У пункта Dropbox почему-то иконка
человечка. Это странно, потому что обычно такая иконка означает пользователя, а
на странице &lt;em&gt;уже&lt;/em&gt; два моих лица. На самом деле пункт Dropbox означает корневую
папку. Ей бы подошел логотип самого Dropbox, а не человечка.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86783093-8cd32100-c068-11ea-9a94-d46be2751fd3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пункт App-center открывает управление приложениями на сайте Dropbox. Очевидно,
фичу не успели сделать в “нативном” приложении, поэтому перекидывают на сайт. На
мой взгляд, внешние кнопки нужно выделять, потому что они сбивают с толку. У нас
же уютное приложение, и вдруг бах, открывается браузер. Кроме того, если
присмотреться, сначала браузер открывает временный файл и недр &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;, который
перенаправляет на &lt;code class=&quot;highlighter-rouge&quot;&gt;dropbox.com&lt;/code&gt;. Не пойму, зачем так сложно?&lt;/p&gt;

&lt;p&gt;Отдельная тема — тултипы. Их делают из добрых побуждений, но это дорога в
ад. Проблема тултипов в том, что они глючат и не пропадают. В случае с Реактом
нужно ждать, пока не перерисуется верхний узел, и все станет как надо. На
картинке ниже типичный случай — зависший тултип. Он не пропадает ни при каких
действиях, пока Реакт наконец не решит, что узел пора обновить.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86782362-a32cad00-c067-11ea-9605-47444487846d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Другой вопрос к блоку справа, который я выделил отдельно. Он занимает треть (!)
всего окна (!!), при этом в нем только текст “выбери файл, и здесь что-то
появится”. Когда появится, тогда и будем говорить, сейчас-то зачем отбирать
полезное место?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86783301-cc9a0880-c068-11ea-9aa2-4246c9d240f8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Обратите внимание, что центральная (и физически, и ментально) часть программы —
файлы — зажата между двумя блоками. Бестолковая панель слева и пустой блок
справа. &lt;em&gt;Программа для работы с файлами плохо показывает файлы.&lt;/em&gt; Градиент справа
намекает, что в таблицу влезло не все. Чтобы увидеть всю таблицу, нужно
растянуть окно &lt;strong&gt;в три раза&lt;/strong&gt;! На экране ноутбука это сделать невозможно, и
выручает только внешний монитор. При этом пустота справа остается.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86782376-a6279d80-c067-11ea-8be4-9f0a301587ed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Может быть, эти элементы (панели и прочее) вовсе не так нужны? Может, следовало
начать с файлов, и только потом добавить обвесы? Ради интереса я открыл папку
Dropbox в обычном Finder и придал окну те же размеры. Посмотрите, насколько
больше информации вмещает окно операционной системы! Не говоря уж о том, что оно
настраивается как угодно, в нем сотня функций, и работает ощутимо быстрее.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86782380-a6c03400-c067-11ea-8d85-e0ccd74cea27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По мелочи: заведомо ошибочные действия в выпадающих меню. “Вы не можете
расшарить весь Dropbox.” Зачем тогда позволять? Выпадашки на 2-3 пункта — что
мешало расположить их внутри?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86783536-1c78cf80-c069-11ea-95f4-69f301737cea.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Проблема в том, удобный интерфейс для файлов требует времени. Нашим операционным
системам по 15-20 лет. Их интерфейс учитывает сотни пограничных случаев, на
которые натыкались люди со всего земного шара. Если считать от эпохи Xerox,
интерфейсу пользователя сорок лет. Будет ошибкой думать, что фронтендер с Нодой
и Реактом пройдет путь в сорок лет за четыре месяца.&lt;/p&gt;

&lt;p&gt;Где-то я читал байку о том, что Стив Джобс, когда узнал о Dropbox, тут же
захотел его купить. У Джобса была чуйка на подобные вещи: он просек, насколько
это круто, когда интерфейса нет, а действие выполняется. Создатель Dropbox не
продал бизнес. Джобс скрипнул зубами и повелел сделать iCloud, который так и не
вышел за пределы яблочной экосистемы. По иронии, им больше пользуются программы,
нежели люди. Приложения пишут туда сейвы и прочие вещи для собственных нужд. Я
не знаю никого, кто бы синхронизировал файлы в iCloud по образу Dropbox.&lt;/p&gt;

&lt;p&gt;Немного диванных предсказаний. Мне кажется, “нативное” приложение останется
надолго, а операции на уровне ОС сведут на нет. С каждым релизом папку
&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Dropbox&lt;/code&gt; будут зарывать глубже в недра, так, чтобы сначала обычные
пользователи не найдут к ней дороги, а потом и гики. С очередным обновлением
Dropbox скажет: со старой папкой было пипец как неудобно, поэтому вот вам
удобное приложение. И лишний гигабайт места, чтобы не жаловались. Тем, кто не
обновится, попарят мозг, а потом обновят насильно — и никакие посты на Медиуме
не помогут.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Вывод:&lt;/strong&gt; если вы делаете дизайн, спрашивайте каждый элемент, зачем он
нужен. Если ответа нет или он слабый, убирайте элемент. Так главные вещи выйдут
на первый план. Добавить гораздо проще, чем убрать. Это касается всего без
исключения: сайта, текста, устройства. Только с этим подходом получится &lt;em&gt;удобный&lt;/em&gt;
дизайн, который уже после можно сделать &lt;em&gt;красивым&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/design-dropbox/</link>
        <guid isPermaLink="true">https://grishaev.me/design-dropbox/</guid>
        
        <category>life</category>
        
        <category>ui</category>
        
        <category>dropbox</category>
        
        
      </item>
    
      <item>
        <title>Интерфейс Dropbox</title>
        <description>&lt;p&gt;У Никиты в статье &lt;a href=&quot;https://tonsky.me/blog/syncthing/&quot;&gt;Computers as I used to love
them&lt;/a&gt; показана установка Dropbox. Легко
заметить, что некогда удобный софт стал жирным монстром, где вместо одного клика
нужно пять. Жаль, что Dropbox повторил судьбу Evernote и пал жертвой
маркетологов и иже с ими.&lt;/p&gt;

&lt;p&gt;Недавно понадобилось кое-что с Дропбокса, и я поставил последний клиент. Прошел
ад с миллионом экранов – это, конечно, жесть. И добавлю один важный факт.&lt;/p&gt;

&lt;p&gt;Дело в том, что Dropbox долгое время считали эталоном программы без
интерфейса. В этом был его козырь, с которым он влетел с двух ног. Разве до
Dropbox не было средств синхронизации? Были. Вот только Dropbox упростил процесс
до минимума. Видишь папку? Кидай туда файлы, и они появятся в другом месте. Все
на уровне операционной системы, копировать-вставить, перетащить мышкой. Не надо
ни к чему привыкать. Да, было окошко с настройками, но обычный юзер туда не
лазил — незачем.&lt;/p&gt;

&lt;p&gt;Вы будете смеяться, но в каком-то лохматом году я делал обмен репликами в 1C на
базе Дропбокса. Один комп выгружал обновления в папку, второй подхватывал, как
только они там появились. Затем наоборот. Работало!&lt;/p&gt;

&lt;p&gt;Очевидно, после ребрендинга в Dropbox взяли курс на уход от файловой
системы. Теперь на любой чих открывается Электрон-приложение, похожее на
очередной Slack или Teams. Это как бэ намек: вот новый гуй, бери, иначе отключим
газ.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/86610024-6c965a00-bfb5-11ea-8080-df0e297a5b4e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Хорошо это или плохо, судить не нам. Прежняя модель была удобной, но, возможно,
в ней бизнес вышел на плато-фазу, а деньги на шеф-повара нужны. Синхронизация
файлов, в общем-то, вещь простая, и рано или поздно наступает насыщение. Все
довольны, все работает, а поскольку Dropbox — не банк и не мобильный оператор,
предложить ему больше нечего. Даже блокчейн не подключишь и машын
лерниг. Кажется, они делали почтовый клиент, но закрыли его.&lt;/p&gt;

&lt;p&gt;Морали нет, просто наблюдение. Больше Dropbox не подходит на роль программы без
интерфейса. Ушла эпоха.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/dropbox-ui/</link>
        <guid isPermaLink="true">https://grishaev.me/dropbox-ui/</guid>
        
        <category>life</category>
        
        <category>ui</category>
        
        <category>dropbox</category>
        
        
      </item>
    
      <item>
        <title>Анонс книги на Хабре</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://habr.com/ru/post/508630/&quot;&gt;Разместил на Хабре&lt;/a&gt; анонс книги. Помогите
вывести новость на главную.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-book-habr/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-book-habr/</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>Она такая твёрдая</title>
        <description>&lt;p&gt;Такая же будет у вас, &lt;a href=&quot;/clj-book-preorder/&quot;&gt;если закажете&lt;/a&gt;. Ещё не поздно.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/85860614-be75fd80-b7c7-11ea-8553-3bde8d14b576.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/hardcover/</link>
        <guid isPermaLink="true">https://grishaev.me/hardcover/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>О принятии решений</title>
        <description>&lt;p&gt;Иногда в жизни приходится делать выбор, а вокруг никого, кто бы мог помочь. Я
имею в виду не выбор между двумя телефонами или машинами. Речь о чем-то таком,
что связано с жизнью в принципе. Мы тратим часы на размышления, нервиничаем,
заедаем стресс. Нерешенный выбор висит как меч над головой.&lt;/p&gt;

&lt;p&gt;Я тоже долго страдал от этого, пока не открыл важные вещи. Пишу их даже не для
вас, а чтобы самому потом перечитывать.&lt;/p&gt;

&lt;p&gt;Первое – моменты, когда вы не можете принять решение, нужно ценить. Это
означает, вы вышли из зоны комфорта, продвинулись на территорию, где не были
прежде. На самом деле не так часто бывает выбор, когда некому помочь, потому что
сюда не попадают материальные блага. Так что самое лучше – не кусать ногти, а
порадоваться: еще год назад такого выбора не было!&lt;/p&gt;

&lt;p&gt;Второе – опыт важнее успеха. Еще раз, только подробнее – опыт, который вы
получите в результате выбора, гораздо ценнее успешного исхода. Предположим, вы
ошиблись, и надо было поступить не так. Из этого “не так” нужно извлечь пользу
– теперь вы знаете, как надо было, а другие не знают. Знание дает вам
преимущество перед другими: можно написать об этом в блоге, выступить на
конференции, а из множества “как” написать книгу.&lt;/p&gt;

&lt;p&gt;Третье – свершение выбора важнее его исходов, потому что свершение – это
движение вперед. Даже если вы продвинулись не в том направлении, можно
скорректировать курс. Это лучше, чем бесконечно сидеть на одном месте.&lt;/p&gt;

&lt;p&gt;В итоге, если у вас есть выбор, разумно подумать какое-то время, но не
затягивать. В противном случае выбор обернется в муку. Когда помнишь, что
ошибочное решение прибавляет знание, ошибаться не так уж страшно. Все, что не
касается необратимых последствий – жизни и здоровья – не стоит тех сожалений,
что мы так лелеем.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/on-decision-making/</link>
        <guid isPermaLink="true">https://grishaev.me/on-decision-making/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Страница книги</title>
        <description>&lt;p&gt;У книги появилась &lt;a href=&quot;/clojure-in-prod/&quot;&gt;выделенная страница&lt;/a&gt;. Всю информацию о ней
– что это такое, где купить, благодарности – буду собирать в одном
месте. Ссылку на нее вы можете шарить в соцсетях и месаджерах. Скоро сделаю
анонс на Хабре.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-book-page/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-book-page/</guid>
        
        <category>book</category>
        
        
      </item>
    
  </channel>
</rss>
