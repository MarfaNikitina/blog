<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 27 Jan 2021 08:55:59 +0000</pubDate>
    <lastBuildDate>Wed, 27 Jan 2021 08:55:59 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Большой-большой проект</title>
        <description>&lt;p&gt;Часто слышу — Кложа не подходит для больших проектов. Даже цитируют Алекса
Миллера из твиттера: “мы считаем Кложу прекрасным решением для небольших команд
в быстро меняющихся условиях рынка”. Цитату пишу по памяти, видел когда-то
давно.&lt;/p&gt;

&lt;p&gt;Что ж, кому-то не подходит и ладно. Мне лично все подходит, и фирме, где я
работаю, тоже. Всегда найдется тот, кому не подойдет — это не важно. На самом
деле я хотел бы поговорить о “больших” проектах — что это такое и чего от них
ожидать.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Откровение: за весь период работы я не помню именно больших проектов. Они всегда
были малыми и средними, а если логика росла, проект делили на несколько. Так
поступали все команды, где я работал. Любому адекватному человеку ясно, что если
проект усложняется, а сущности громоздятся друг на друга, надо разнести их, и
все станет ясно.&lt;/p&gt;

&lt;p&gt;Когда-то давно я работал в Wargaming. Наша команда занималась кланами и
Глобальной картой. Это был жирный проект на Django, который управлял событиями
на карте и кланами. Со временем стало ясно, что карты и кланы — самостоятельные
сущности, которым трудно ужиться в одном проекте. Поэтому их
разделили. Получилось два проекта — карты и кланы. Для взаимодействия они
сначала лазили в общую базу, потом каждый обрел свой API.&lt;/p&gt;

&lt;p&gt;Было много других случаев, когда одна из фич оттягивала на себя внимание и
мешала другим. Ее просто выносили в отдельный сервис. Уточню, не микро-, а
обычный сервис. Например, единая авторизация, рассылка писем, служба
статистики. Не можешь ужиться со всеми — будь добр живи отдельно. Как в жизни.&lt;/p&gt;

&lt;p&gt;Не понимаю, почему проект обязательно должен быть большим. Откуда эти аргументы,
что, мол, твой язык подходит только для средних проектов, а для больших — нет? У
меня встречный вопрос — почему проект должен быть большим? Откуда эта
гигантомания? Разве лишний вес и размер — не признак инженерного провала?&lt;/p&gt;

&lt;p&gt;Из истории мы знаем примеры того, как стремление к размерам оборачивалось
трагедией. Самый большой корабль — Титаник. Самый большой дирижабль —
Гинденбург. Самый большой ядерный реактор — Чернобыльская АЭС. Люди искренне
верили, что большой значит надежный. Как может потонуть такой большой корабль?
Да вот так, за три часа.&lt;/p&gt;

&lt;p&gt;С Чернобылем, кстати, особая ситуация. По воспоминаниям инженеров, в его размере
не было никакого смысла. Это была чистейшей воды советская гигантомания. Погоня
за показателями, а не качеством и дизайном системы. Инженерам приходилось
управлять реактором как четыря отдельными. Из-за колоссальных размеров
температура и другие показатели менялись в зависимости от места замера. К чему
это привело, всем известно.&lt;/p&gt;

&lt;p&gt;Еще в античные времена умные люди поняли, что правильный дизайн означает
соразмерность человеку. Никому не нужен стакан размером с кувшин. Люди не хотя
жить на 151 этаже — их должно быть не более десяти-двенадцати. Код должен быть
кратким — без геттеров, сеттеров и public final static void бла-бла. Он должен
точно описывать задачу. И уж тем более, если, чтобы понять код, нужна платная
IDE с подсказками, то здесь что-то не так.&lt;/p&gt;

&lt;p&gt;Большой проект — это неуловимый Джо. Можно прожить всю жизнь в ожидании Большого
проекта, который никак не настанет. Тешить себя мыслью, что пусть сейчас
неудобно, но когда-то настанет Большой проект, и там-то я развернуть. А те
умники будут страдать со своей Кложей. Возможно. Но скорей всего, это никогда не
наступит.&lt;/p&gt;

&lt;p&gt;Вот и сейчас, дорогая редакция: пишу плагин к Kafka на Кложе. Сравниваю с чужими
плагинами на Java. У меня 8 .clj-файлов, у них 20 .java-файлов. У меня 478
строк, у них 1920 строк. Одна и та же задача — отправить сообщеньки в сеть. А
разница по всем показателям в три-пять раз.&lt;/p&gt;

&lt;p&gt;Мне возразят: а как бы ты писал IDE или какую-то другую жирную штуку, которая
вот прямо никак не делится. Ответ в том, что все на свете делится. Не бывает
неделимых вещей. Человек внутри не сплошной, как картошка, а состоит из органов
и системы обращения веществ. Большой проект — это всегда система из ядра и
модулей, которые как-то общаются друг с другом. Поэтому первое, что надо сделать
в большом проекте — нащупать систему. Далее выделить компоненты и решить, как им
общаться. Потом спокойно работать над каждым компонентом в отдельности.&lt;/p&gt;

&lt;p&gt;Но увы, разработчики мечтают о Больших, Сложных проектах. Средние — для ламеров,
это не про нас! Так и получается Большой проект. Вот только он большой не
потому, что является таким, просто его так спроектировали. Поэтому лучше умерить
влажные мечты о больших проектах и подумать, как больше сделать
маленьким. Таким, чтобы оно умещалось в одну голову без насилия над собой.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/big-project/</link>
        <guid isPermaLink="true">https://grishaev.me/big-project/</guid>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Поудалял</title>
        <description>&lt;p&gt;Месяца три назад озаботился порядком в цифровой среде. С ней то же самое, что с
обычной уборкой: если ничего не далать, обрастешь хламом. Со временем теряешься,
что где, каждый сервис требует внимания, словом — надо сжать булочки и
почистить.&lt;/p&gt;

&lt;p&gt;Прошелся по соцсетям, облачным хранилищам и пет-проектам. Получил обалденный
кайф от того, что избавился от балласта. Мысль, что сервис или проект больше не
потревожит тебя, перевешивает любое сожаление. Вот неполный список того, что
пошло под нож и почему.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Фейсбук.&lt;/strong&gt; Абсолютное зло, не поддается никакому осмыслению. Интерфейс из
потустороннего мира, жутко тормозит. Компания погрязла в скандалах, связанных с
торговлей данными, потеряла всякое лицо. Фейсбук возомнил себя модератором всея
интернета, учит как думать и жить. Извините, нет.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ВКонтакте.&lt;/strong&gt; Как и Фейсбук, эта сеть перегружена сущностями сверх
меры. Группы, форумы, обсуждения — теряюсь, что и где. По факту у Вконтакта
только одна нормальная функция — переписка, но ее вытеснил Телеграм. И еще
дурацкое название с предлогом.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Одноклассники.&lt;/strong&gt; Тут все понятно: зарегался, нашел одногруппников и
собутыльников. Дальше только смотреть чужие фотки и отвечать где работаешь и
сколько у тебя детей. Нужные люди давно переехали в Вайберы-Ватсаппы, так что
сервис без надобности.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Инстаграм.&lt;/strong&gt; Закинул туда штук десять фоток, но Инстаграм уже давно не про
фотки, а своего рода Твиттер — треды, сторизы, локальные разборки… Не
употребляю.&lt;/p&gt;

&lt;p&gt;Кстати, удалить соцсети оказалось проще, чем я думал. Хотя сервисы прячут нужный
пункт в дебрях настроек, с самим процессом проблем не возникает. Болтают, что
десять лет назад в Одноклассники надо было отправить бумажное письмо(!) в
Ригу(!!) с заверенной копией паспорта(!!!). Не знаю, правда ли, но сейчас такого
беспредела нет. Кроме того, почти все соцсети позволяют уведомить друзей
сообщением, где разумно указать почту или телефон.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Твиттер.&lt;/strong&gt; Не я закрыл Твиттер, а он меня. Долгое время я парсил Твиттер с
сотни подставных аккаунтов, и по запаре указал ключи с основной учетки. Забанили
по самые помидоры: новый пользователь с моим именем удаляется через минуту. Не
разбираясь, чуваки снесли учетку некоего Игоря Гришаева (хотел одно время
выкупить у него ник igrishaev). Ни на какие письма и запросы Твиттер не
ответил. Штош, прощайте.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Дропбокс.&lt;/strong&gt; Про этот сервис я писал не раз (&lt;a href=&quot;/dropbox-ui/&quot;&gt;пост&lt;/a&gt;, еще
&lt;a href=&quot;/design-dropbox/&quot;&gt;пост&lt;/a&gt;). Вкратце — Дропбокс в свое время был революцией, но скатился в
унылую массу ненужных фич. Ребята выпустили облачные документы, потом какие-то
заметки, команды, менеджер паролей… Венцом стал дичайший ребрендинг,
“нативное” приложение на 300 мегабайт и сто экранов установки. Забрал пару
файлов, снес и закрыл учетку. Помню старый Дропбокс, скорблю.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queryfeed.&lt;/strong&gt; Удалил свой главный &lt;a href=&quot;/tag/queryfeed/&quot;&gt;пет-проект&lt;/a&gt;. Занимался им аж с
2011 года – десять лет! Вкратце, сервис воровал данные из популярных соцсетей —
в основном Твиттера и Инстаграмма. В работе над ним я испробовал сотни приемов и
трюков, применял всякие выкрутасы. Покупал серые прокси, ходил в сеть через Тор,
парсил HTML — всего и не вспомнишь. Отдельный факт – проект пережил не одну
соцсеть! В свое время подключал Google Buzz и Google Plus. Оба появились и
закрылись, а мой работал.&lt;/p&gt;

&lt;p&gt;Сервис был платный с подпиской в Paypal. Клиентов было не очень много, но на
хостинг хватало. В лучшие месяцы приходило долларов 250. Чтобы справится с
нагрузкой, которая исходила от ботов и скриптов, сделал архитектуру на множество
нод, чтобы в любой момент добавить новую. Ничем серьезным этот бизнес не стал, и
со временем отвлекал от основной работы. Все-таки пасинг сторонних ресурсов —
это паразитирование на чужом бизнесе. В общем, закрыл сервис, не стал даже
спасать бекапы и прочее, просто грохнул все ноды. Ушла эпоха!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Paypal.&lt;/strong&gt; Имел несколько Paypal-учеток для разных проектов. Оставил только
один личный. Нареканий к сервису почти нет, просто работает. Раз в пару лет
меняет интерфейс, и ладно.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Домены.&lt;/strong&gt; За эти годы накопил достаточно доменов для “своих проектов”. Ни один
из них не стал чем-то серьезным, и пора уже оставить надежду на успешный
стартап. Даже не выставил на аукцион — просто удалил, и теперь домены доступны
всем.&lt;/p&gt;

&lt;p&gt;Что там еще? Левые учетки гугла. Хостинги, которыми уже не пользуюсь. Локальные
файлы столетней давности. Как же классно все это удалять — неистово советую
сделать то же самое. Старое освобождает путь для нового, и это просто
замечательно.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/deleted/</link>
        <guid isPermaLink="true">https://grishaev.me/deleted/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Смысл</title>
        <description>&lt;p&gt;Смысл жизни — пожалуй, самый инфантильный вопрос, которым может задаться
человек. В жизни особи не больше смысла, чем в существовании камня. Тем более,
что сама постановка вопроса убога. При чем тут смысл? Почему не цель или
причина? С этими словами в вопросе становится больше смысла (забавная игра
слов).&lt;/p&gt;

&lt;p&gt;Беда в том, что если открыто признаться, что не видишь в жизни смысла, тебе
начнут помогать его найти. Учителя, церковь, патриоты и всякие деды-воевалы
всегда наготове. А то и просто те, кто нашел свой смысл, но не терпит пустоты у
других. Нельзя же без смысла!&lt;/p&gt;

&lt;p&gt;Поэтому самое удобное поведение — притвориться, что видишь смысл и спокойно жить
без всякого смысла.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/meaning-of-life/</link>
        <guid isPermaLink="true">https://grishaev.me/meaning-of-life/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Что там с книгой? Полгода спустя</title>
        <description>&lt;p&gt;Есть несколько новостей насчет книжки.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Издательство сообщает, что скоро ее можно будет купить на
Алиэкспрессе. Отношусь к этому скептически, но все же новая площадка — почему
нет? Вдруг у вас там бонусные баллы, купоны и прочие ништяки, которые давно пора
потратить? Вот и повод. Или вы застряли в Китае, а книги под рукой нет, и вот
пожалуйста. Как будет ссылка, сразу вам сообщу.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;С ноября работаю над вторым изданием книги. В нем исправлено много ошибок,
появились новые разделы вместо старых. Текст стал точнее, ушли смысловые
неточности. Про второе издание будет отдельный пост.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Сделал публичным репозиторий книги! Милости прошу:
&lt;a href=&quot;https://github.com/igrishaev/clj-book&quot;&gt;igrishaev/clj-book&lt;/a&gt;. Проект целиком на LaTeX, Docker и немного
Кложи. Уточню, что я не спец в LaTeX, поэтому приму любую критику и
советы. Инструкции по сборке допишу в readme чуть позже.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Книга в процессе перевода на английский. Вместе с &lt;a href=&quot;https://tran.su/&quot;&gt;Евгением Бартовым&lt;/a&gt;
мы работаем уже над седьмой главой. Впереди долгая шлифовка и адаптация правок
из второго издания, но когда-нибудь английская книга выйдет. Меня уже завернули
в The Pragmatic Programmer из-за проблем с правами, так что буду искать другой
вариант.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Пока что все. Как видно, почти каждый пункт тянет на отдельный пост, буду
освещать по ходу дела.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/book-progress6/</link>
        <guid isPermaLink="true">https://grishaev.me/book-progress6/</guid>
        
        <category>read</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Фон на созвоне</title>
        <description>&lt;p&gt;Сейчас во всех программах для звонков есть возможность замылить фон. Полезная
вещь. Некоторые звонят из домашней обстановки, и ничего не можешь с собой
поделать: рассматриваешь хрустальную стенку, хлам в углу, корешки книг, зашедшую
в комнату маму.&lt;/p&gt;

&lt;p&gt;Не знаю как у других, а в Google Meet можно поменять фон на картинку и даже
загрузить свою. Прикольная штука, коллеги часто этим пользуются. Но до чего же
скудная фантазия у людей! Один ставит тропической остров, второй — серверную
стойку. Что за убожество.&lt;/p&gt;

&lt;p&gt;Фон должен быть не просто фоном, он должен вызывать какие-то эмоции,
воспоминания. Говоря русским языком — МЭСАДЖ. За пять минут накидал фонов,
которые могут найти отклик в собеседниках. Замечу, что фоны сохраняются, и
дальше их можно переключать мышкой.&lt;/p&gt;

&lt;p&gt;Божественный ковер:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688082-6c0d1b00-4205-11eb-9003-344050eec0bf.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 10 52&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Обои с Мака:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688083-6fa0a200-4205-11eb-954e-8e2239f9c46e.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 14 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Винда:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688084-6fa0a200-4205-11eb-9a26-2e03406b7cba.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 14 19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Минитор Эпла за страшные деньги:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688085-70393880-4205-11eb-9c64-c9feab1ed3ee.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 14 10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Наскальная живопись:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688086-70d1cf00-4205-11eb-8309-ed7154f33a2b.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 14 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ростометр:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688087-716a6580-4205-11eb-8e37-aac9da83a11c.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 13 48&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мавзолей:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688088-716a6580-4205-11eb-9e3c-2032b6f42b23.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 13 35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Властелин Колец:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688089-716a6580-4205-11eb-96e8-4ce7598c667c.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 13 20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Телевизор:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688090-7202fc00-4205-11eb-9396-ab321f2b3d5c.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 13 08&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Патриотическая тема:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688091-7202fc00-4205-11eb-8949-200e3e7a5ba0.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 12 58&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Зомби:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688093-729b9280-4205-11eb-8fc5-1c2512aac9d6.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 12 46&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Апокалипсис:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688094-729b9280-4205-11eb-806f-e4c8bc86d9a4.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 12 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мульты:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688095-73342900-4205-11eb-9e9a-f2ecf31bf86b.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 12 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пинк Флойд:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688096-73342900-4205-11eb-8c82-81d68be61805.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 12 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Матрица:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688098-73ccbf80-4205-11eb-8bb6-4e621e3f85e3.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 11 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Еще Пинк Флойд:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102688099-73ccbf80-4205-11eb-86f6-9b8dede20894.jpg&quot; alt=&quot;Screenshot 2020-12-19 at 14 11 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пользуйтесь и вы!&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/meet-bg/</link>
        <guid isPermaLink="true">https://grishaev.me/meet-bg/</guid>
        
        <category>read</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Порты и прогресс</title>
        <description>&lt;p&gt;Сегодня утром потянулся к ноуту, чтобы вставить провод в USB Type-C. И только
тогда заметил, что все четыре порта заняты.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102498633-478d3380-408b-11eb-9f6d-cc0d635731e2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По часовой стрелке:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;монитор (Type-C → Displayport, 144Hz);&lt;/li&gt;
  &lt;li&gt;питание ноута;&lt;/li&gt;
  &lt;li&gt;зарядка устройств (телефон, клавиатура, тачпад, наушники);&lt;/li&gt;
  &lt;li&gt;токен доступа для работы.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ноут с четырьмя портами у меня недавно, с осени. Хорошо помню, что как и многие
другие, переживал из-за портов. Как подключать старые девайсы? А что с картами
памяти? Как буду без HDMI? Таскать пачку переходников?&lt;/p&gt;

&lt;p&gt;На первых порах пришлось кое-что докупить: взял фирменный блок c тремя портами
(USB, HDMI и Type-C):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102498690-5a076d00-408b-11eb-92a9-be53d83d8847.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;, а также китайский донгл с нового USB на простой:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102498406-fd0bb700-408a-11eb-87be-5779e41f6247.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Однако сейчас я ими уже не пользуюсь. Пихать чужие флешки небезопасно, а любой
файл проще кинуть в мессенджерах. HDMI не поддерживает герцовку выше 60, и с
недавних пор мне стало это важно (потом напишу отдельно). Карты памяти? Проще
подключить андроид родственника по проводу, чем выковыривать карточку. Тем
более, что китайцы ставят ее под батарею и в другие интересные места.&lt;/p&gt;

&lt;p&gt;Словом, если бы мне кто-то сказал, что уже скоро все четыре порта Type-C будут
заняты, я бы удивился.&lt;/p&gt;

&lt;p&gt;В этот момент я понял, что такое прогресс. Как бы ни стонали обыватели, новый
порт лучше и удобней. Он маленький, мощный, поддерживает все известные
форматы. По нему передают видео, звук, данные, электричество, словом, огонь. Не
удивительно, что два метра кабеля Thunderbolt стоят 14(!) косарей: по сути это
провод из ста проводов.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1059232/102498645-4bb95100-408b-11eb-8654-6c200e89fb80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для экспериментов я купил короткую версию длиной 0.8 метра и доволен ей.&lt;/p&gt;

&lt;p&gt;Удивляет скорее то, что хотя в ноутах Apple везде новые порты, на других
устройствах все еще старый Lightning. Даже в последних айфонах. Приходится
держать для зарядки провод Type-C → Lightning. Этому пора положить конец —
везде ставить Type-C.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/mac-ports/</link>
        <guid isPermaLink="true">https://grishaev.me/mac-ports/</guid>
        
        <category>read</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Почитать на выходных (выпуск 32)</title>
        <description>
&lt;p&gt;Горячо советую прочесть эти две статьи:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://habr.com/ru/company/ruvds/blog/530272/&quot;&gt;Как писать статьи в IT-журналы и блоги&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Интервью с редактором журнала “Хакер” Андреем Письменным. Очень глубокий,
дружелюбно поданый материал. Допускаю, что как и я, вы читали “Хакер” сто лет
назад на бумаге. Даже если так, все равно прочитайте: столь качественного
интервью не попадалось уже давно.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php&quot;&gt;In-depth: Functional programming in C++&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Рассуждения на тему функционального программирования от лица Джона
Кармака. Разумный, взвешенный взгляд, адекватные доводы и аргументы и все это
— в разрезе практики. Все-таки Джон и команда пишут игры, а не решают задачки
с волшебными шляпами. Даже если с английским у вас не ахти, прогоните через
переводчик. Материал так хорош, что планирую сделать русскую версию.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/read-32/</link>
        <guid isPermaLink="true">https://grishaev.me/read-32/</guid>
        
        <category>read</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Базы данных в Clojure (1)</title>
        <description>&lt;p&gt;&lt;em&gt;В этой главе мы обсудим, как работать с реляционными базами данных из
Clojure. Большую часть описания займет библиотека clojure.java.jdbc и ее
надстройки. Вы узнаете, какие проблемы обычно сопровождают доступ к базам и как
их решать в Clojure.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;Реляционные-БД&quot;&gt;Реляционные БД&lt;/h2&gt;

&lt;p&gt;В разработке на бекенде базы данных занимают важное место. Говоря упрощенно,
любая программа сводится к обработке данных. Конечно, данные могут поступать не
только из баз, но и сети и файлов. Однако в целом доступ к информации регулируют
базы данных — специальные программы, сложные, но с богатыми возможностями.&lt;/p&gt;

&lt;p&gt;Базы данных, или сокращенно БД, бывают разных видов. Они различаются
архитектурой, способом хранения информации, протоколом работы с
клиентом. Некоторые базы работают только на клиенте, потому что не предлагают
сетевой интерфейс. Другие хранят только текст и оставляют вывод типов на
усмотрение клиента. В этой главе мы не ставим цель охватить как можно больше
СУБД и способов для работы с ними. Наоборот, сфокусируем внимание на том, что
вас ждет в реальном проекте. Скорей всего это будет классическая реляционная БД
вроде PostgreSQL или MySQL. О них мы и будем говорить.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Реляционные базы данных называют так из за модели реляционной алгебры. Это
изящный математический аппарат с набором операций, например выборкой, проекцией,
декартовым произведением и другими. Из аппарата следуют строгие правила о том,
как работает та или иная операция. Важно помнить, что базы данных работают не
спонтанно, а по четким алгебраическим правилам. Из этих же правил следуют
нормальные формы (первая, вторая и третья), доказать которые можно аналитически,
а не на глаз.&lt;/p&gt;

&lt;p&gt;Мы не ставим цель учить реляционную алгебру с самых азов. Обратитесь к &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D0%B0%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0&quot;&gt;статье в
Википедии&lt;/a&gt; и другим книгам, где ее рассматривают без привязки к конкретной
БД.&lt;/p&gt;

&lt;h2 id=&quot;Устройство&quot;&gt;Устройство&lt;/h2&gt;

&lt;p&gt;Перейдем к понятиям, более привычным программисту. Базы хранят содержимое в
таблицах. Запись в таблице называется кортежем и состоит из отдельных
полей. Поля могут быть разного типа. Состав полей и их порядок одинаков в рамках
таблицы. Не может быть так, что в первой записи два поля, а во второй три. Если
нужно указать, что в поле нет значения, в него пишут специальное “пустое”, чаще
всего NULL.&lt;/p&gt;

&lt;p&gt;У записи есть особое поле, которое называют первичным ключом, Primary key. Ключ
однозначно идентифицирует запись в таблице. Не может быть двух записей с
одинаковым ключом. Чаще всего роль ключа играет число с автонумерацией, но может
быть и почтовым адресом или полными именем. В редких случаях ключ может быть
составным, то есть определяться парой полей, например полным именем и годом
рождения. В этом случае мы допускаем, что в таблице могут быть полные тезки
разных годов рождения или люди одного года с разными именами, но не то и другое
вместе.&lt;/p&gt;

&lt;p&gt;Внешним ключом называется поле, которые ссылается на первичный ключ другой
таблицы. Для краткости его называют ссылкой. Примером ссылки может быть поле
&lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; в таблице профилей, которое указывает на поле &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; из таблицы
пользователей.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;primary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;references&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;avatar&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В данном случае ссылка отличается от простого числового поля. Ссылка
гарантирует, что такой пользователь действительно существует. Если бы это было
просто число, гарантии целостности бы не было.&lt;/p&gt;

&lt;p&gt;Кроме целостности, внешний ключ поддерживает реакцию на удаление. По умолчанию
нельзя удалить сущность, на которую кто-то ссылается. Однако можно задать
правило, что связанная сущность тоже удаляется. Так, при удалении пользователя
удалится и его профиль, ведь он не нужен нам сам по себе. В другом случае ссылка
на удаленную сущность станет NULL, если это разрешено в свойствах поля.&lt;/p&gt;

&lt;p&gt;Из университета мы знаем, что связи бывают разных типов: один к одному или ко
многим, многие ко многим. Профиль, который ссылается на пользователя — пример
связи один к одному. Несколько заказов у пользователя — один ко многим. Тип
связи легко задать ограничением на поле ссылки. Если в таблице профилей сделать
поле &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; уникальным, не получится создать два профиля с одинаковым
&lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;. Это именно то, что нам требуется — чтобы у одного пользователя не
могло быть два профиля.&lt;/p&gt;

&lt;h2 id=&quot;Запросы&quot;&gt;Запросы&lt;/h2&gt;

&lt;p&gt;База данных обращается с миром через SQL — структурированный язык запросов. Это
текст, в котором описаны наши намерения — прочитать таблицу, добавить запись,
обновить поле. Запросы имеют четкую структуру, которая чаще всего зависит от
главного оператора. К ним относятся SELECT, INSERT, UPDATE, DELETE — стандартные
CRUD-операции над записями.&lt;/p&gt;

&lt;p&gt;Существуют несколько стандартов SQL, обозначенных годами, когда они были
приняты: SQL’92, ‘99, ‘2003 и другие. Как правило, каждая база данных
поддерживает стандарт определенного года вдобавок с расширениями —
возможностями, которые не входят в стандарт. При чтении документации обращайте
внимание на то, относится ли функциональность к стандарту или же это частное
решение конкретной БД.&lt;/p&gt;

&lt;p&gt;В аббревиатуре SQL последняя буква означает language, язык. Важно помнить, что
это не язык программирования: в нем нельзя описать что-либо алгоритмом или
переменной. Говоря точнее, SQL не является полным по Тьюрингу языком: вы не
сможете построить SQL-выражение на нем самом. Поэтому SQL-запросы часто
приходится строить по частям в полноценном (полным по Тьюрингу) языке, например
Java, Python, Clojure.&lt;/p&gt;

&lt;p&gt;Современные базы данных предлагают встроенные языки и операторы, чтобы это
исправить. Так, в PostgreSQL вам доступен блок DO, где работают переменные,
циклы и даже перехват исключений. Но это частное решение, которое не входит в
стандарт.&lt;/p&gt;

&lt;p&gt;(Продолжение следует)&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-jdbc-1/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-jdbc-1/</guid>
        
        <category>clojure</category>
        
        <category>jdbc</category>
        
        
      </item>
    
      <item>
        <title>Зипперы в Clojure (часть 8). Заключение</title>
        <description>&lt;h2 id=&quot;Оглавление&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В заключение рассмотрим другие возможности зипперов, которые могут быть полезны.&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;

&lt;p&gt;И прошлых примеров видно, что зипперы подходят для работы с форматом XML. В том
числе их можно применить и для HTML. Строго говоря, синтаксис HTML отличается от
XML: некоторые элементы вроде &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; или &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; не имеют закрывающих
тегов. Проблему можно решить с помощью парсеров, которые учитывают эти
особенности. На выходе получим XML-дерево, которое поддается обходу как в
примерах выше.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Библиотека &lt;a href=&quot;https://github.com/davidsantiago/hickory&quot;&gt;Hickory&lt;/a&gt; предлагает парсер разметки HTML. Разбор основан на
Java-библиотеке &lt;a href=&quot;https://jsoup.org/&quot;&gt;JSoup&lt;/a&gt;, которая строит дерево элементов. Hickory
содержит модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;hickory.zip&lt;/code&gt;, чтобы перестроить исходное дерево в
Clojure-подобное (с элементами &lt;code class=&quot;highlighter-rouge&quot;&gt;:tag&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:attrs&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;:content&lt;/code&gt;). Добавьте в проект
зависимость:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.7.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и выполните пример:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipper-manual.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://grishaev.me/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java.net.URL.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;h/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-clj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;h/as-hiccup&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hz/hiccup-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-clj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Объясним эти преобразованиия. В переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; загружается верстка сайта в
виде строки. В переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;doc-src&lt;/code&gt; оказалось дерево, полученное из HTML. Это
объект класса &lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt; из пакета &lt;code class=&quot;highlighter-rouge&quot;&gt;org.jsoup.nodes&lt;/code&gt;. С точки зрения Clojure это
черный ящик: чтобы работать с ним, нужно читать документацию к методам
&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;as-hiccup&lt;/code&gt; переводит документ в набор вложенных векторов вида:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:attr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;где на первом месте тег, затем словарь атрибутов, а за ним – любое число таких
же векторов или строк. Это стандартное представление HTML в Clojure, и многие
библиотеки следуют ему.&lt;/p&gt;

&lt;p&gt;Функция &lt;code class=&quot;highlighter-rouge&quot;&gt;hiccup-zip&lt;/code&gt; возвращает зиппер для этой структуры. С ним можно сделать
все то, в чем мы упражнялись раньше, например:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;удалить нежелательные теги вроде &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;оставить эти теги, но исправить их атрибуты;&lt;/li&gt;
  &lt;li&gt;оставить опасные теги, только если их источник указывает на доверенные сайты;&lt;/li&gt;
  &lt;li&gt;найти наиболее вложенные элементы (оценить длину результата &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/path&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вот как найти все картинки страницы:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-img?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-&amp;gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-img?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc-&amp;gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/static/photo-round-small.png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Первая функция проверяет, что локация указывает на узел с тегом &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, вторая
извлекает из него атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;. Последняя форма вернет список ссылок на
изображения.&lt;/p&gt;

&lt;p&gt;На базе этих действий можно построить фильтрацию HTML, что особенно важно, если
разметка приходит от пользователя. Другой сценарий — найти в HTML подходящее
изображение для обложки в соцсети. Для этого нужно выбрать все изображения,
оценить их ширину и высоту и выбрать наибольшее по площади (если заполнены
атрибуты &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Hickory учитывает типовые случаи и предлагает селекторы для поиска по тегу и
атрибуту. Для этого даже не обязательно приводить дерево JSoup к зипперу. Однако
в редких случаях нужно найти теги со сложной взаимосвязью как в примере с
товаром и набором (только в наборе или строго не в нем). Эти задачи изящно
ложатся на зипперы.&lt;/p&gt;

&lt;h2 id=&quot;Данные-и-сериализация&quot;&gt;Данные и сериализация&lt;/h2&gt;

&lt;p&gt;Другой плюс зипперов в том, что они представлены данными — комбинацией списков и
словарей. Это значит, текущий зиппер можно записать в EDN или JSON. При чтении
мы получим прежнюю структуру данных и продолжим обход с места, где
остановились. Это отличает Clojure от объектных языков, где в общем случае
нельзя записать объект в файл без определений методов &lt;code class=&quot;highlighter-rouge&quot;&gt;(de)serialize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;При восстановлении зиппера помните о его метаданных. Функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;make-node&lt;/code&gt;, которые мы передали в конструктор, хранятся в
метаданных зиппера. Это сделано для того, чтобы отделить данные от действий над
ними. Проверим метаданные:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:branch?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.core/sequential?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip/children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:make-node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hickory.zip/make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Напишем функции для сброса и чтения EDN:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-save&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pr-str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;slurp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn/read-string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Предположим, мы дошли со середины зиппера, и теперь сохраним его в файл:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/next&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edn-save&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zipper.edn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Чтобы считанный из файла зиппер заработал, добавьте ему метаданные. Их можно
либо вынести в переменную заранее, либо объявить вручную.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:branch?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequential?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'hickory.zip/children&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:make-node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'hickory.zip/make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Во втором случае нам прошлось указать ссылки на функции &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; и
&lt;code class=&quot;highlighter-rouge&quot;&gt;make-node&lt;/code&gt;, потому что они приватные. Прочитанный зиппер окажется в том же
состоянии, что и в момент сохранения.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip-new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zipper.edn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edn-load&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-meta&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip-meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc-zip-new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip/node&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:head&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Хранение зиппера в долговременной памяти дарит новые возможности. Например,
обход каких-то данных занимает время, и программа может делать задачу порциями,
сохраняя промежуточных результат. Так работают сложные бизнес-сценарии. Если
клиент отказывается от услуг фирмы, вы должны удалить его записи в базе, файлы,
ссылки на него в документах и много другое. Этот процесс можно представить как
набор шагов, некоторые из которых выполняются последовательно, а другие —
параллельно. В Exoscale подобные сценарии работают на базе зипперов. На каждом
шаге код читает из базы зиппер в виде EDN, сдвигает его на один &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/next&lt;/code&gt;,
выполняет задачу и обновляет запись в базе с новой версией зиппера.&lt;/p&gt;

&lt;h2 id=&quot;Другое&quot;&gt;Другое&lt;/h2&gt;

&lt;p&gt;Пример с разменом валют показывает, как найти решение задачи перебором. Если
нужно найти оптимальную цепочку шагов, максимальную цену, маршрут обхода —
возможно, вам помогут зипперы. Легко проверить, ложится ли на них ваша
задача. Зиппер подразумевает, что у вас есть текущее значение и несколько других
на его базе. Если условие работает, вы в шаге от того, чтобы построить дерево и
обойти его.&lt;/p&gt;

&lt;p&gt;Скажем, согласно таблице обмена доллар (текущее значение) можно разменять на
евро и рубль (дочерние значения). Из точки A (текущее) можно проехать в пункты B
и C (дочерние). В HTML один тег может включать в себя другие. Все три случая
подходят к зипперу, нужно только описать функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt; — может элемент иметь
потомков, и &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; — как конкретно их найти.&lt;/p&gt;

&lt;h2 id=&quot;Сторонние-библиотеки&quot;&gt;Сторонние библиотеки&lt;/h2&gt;

&lt;p&gt;Модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.zip&lt;/code&gt; предлагает достаточно функций; все же по ходу главы нам
пришлось дописывать свои. В библиотеке &lt;a href=&quot;https://github.com/clojure/data.zip/&quot;&gt;data.zip&lt;/a&gt; собраны различные
дополнения, например предикаты &lt;code class=&quot;highlighter-rouge&quot;&gt;attr=&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;tag=&lt;/code&gt; для поиска по атрибуту и
тегу. Изучите библиотеку, если много работаете с зипперами.&lt;/p&gt;

&lt;h2 id=&quot;Заключение&quot;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Зипперы — это механизм навигации по структуре данных. Зиппер предлагает движение
по четырем сторонам: вниз, вверх, влево, вправо. Элемент в центре называется
текущим.&lt;/p&gt;

&lt;p&gt;Зиппер может перемещаться по самым разным структурам. Ему нужно знать только две
вещи: является ли текущий элемент веткой дерева и если да, то как найти
потомков. Для этого зиппер принимает функции &lt;code class=&quot;highlighter-rouge&quot;&gt;branch?&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt;, которые
позже хранит в метаданных.&lt;/p&gt;

&lt;p&gt;Обычно потомков находят из родительского узла, но в некоторых случаях получают
динамически. Например, чтобы узнать, на какие валюты можно разменять текущую,
обращаются к словарю обмена. Для этого словарь должен быть виден функции
&lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; в качестве глобальной переменной или замыкания.&lt;/p&gt;

&lt;p&gt;Текущий элемент зиппера называют локацией. Он хранит не только очередное
значение, но и данные для перехода во все стороны, а также путь. Это выгодно
отличает зиппер от &lt;code class=&quot;highlighter-rouge&quot;&gt;tree-seq&lt;/code&gt; и аналогов, которые раскладывают дерево в цепь без
учета пути к элементу. Некоторые задачи состоят именно в поиске нужного пути.&lt;/p&gt;

&lt;p&gt;Зиппер предлагает функции для правки и удаления текущего узла. Правка может
отталкиваться от текущего значения (&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/edit&lt;/code&gt;) или нового (&lt;code class=&quot;highlighter-rouge&quot;&gt;zip/replace&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;По умолчанию обход зиппера происходит в глубину (depth first). При переходе в
конец локация получит отметку о том, что выполнен полный цикл
прохода. Используйте функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;zip/end?&lt;/code&gt;, чтобы прекратить итерацию. В наших
примерах мы написали функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;zip-iter&lt;/code&gt;, которая совершает строго один обход.&lt;/p&gt;

&lt;p&gt;Для некоторых задач необходим обход в ширину. Это может случиться, когда одна из
ветвей дерева потенциально бесконечна. Для обхода в ширину мы написали свои
функции, которых нет в поставке Clojure.zip.&lt;/p&gt;

&lt;p&gt;Зипперы полезны в работе с XML, поиском решений, фильтрации HTML. Разберитесь с
ними, чтобы быть готовыми к самым разным задачам производства.&lt;/p&gt;

&lt;h2 id=&quot;Оглавление-1&quot;&gt;Оглавление&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-1/&quot;&gt;Зипперы в Clojure (часть 1). Азы навигации&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-2/&quot;&gt;Зипперы в Clojure (часть 2). Автонавигация&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-3/&quot;&gt;Зипперы в Clojure (часть 3). XML-зипперы&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-4/&quot;&gt;Зипперы в Clojure (часть 4). Поиск в XML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-5/&quot;&gt;Зипперы в Clojure (часть 5). Редактирование&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-6/&quot;&gt;Зипперы в Clojure (часть 6). Вирутальные деревья. Обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-7/&quot;&gt;Зипперы в Clojure (часть 7). Обход в ширину. Улучшенный обмен валют&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/clj-zippers-8/&quot;&gt;Зипперы в Clojure (часть 8). Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-zippers-8/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-zippers-8/</guid>
        
        <category>clojure</category>
        
        <category>zippers</category>
        
        
      </item>
    
      <item>
        <title>Помогайте (опровержение)</title>
        <description>&lt;p&gt;Послушайте еще одну кулстори и выводы из нее.&lt;/p&gt;

&lt;p&gt;Недавно я смотрел код на Джаве, и не понял одну вещь. Все-таки я кложурист и в
кишки JVM лажу только по необходимости. Было непонятно, почему вместо интерфейса
можно передать лямбду, ведь последняя, насколько я знаю, имплементит &lt;code class=&quot;highlighter-rouge&quot;&gt;Runnable&lt;/code&gt;
и &lt;code class=&quot;highlighter-rouge&quot;&gt;Callable&lt;/code&gt;, а в коде был левый интерфейс. Нормальный вопрос, который знает
средней руки джавист. И тут Штирлиц ошибся — спросил об этом в Телеграм-чатах.&lt;/p&gt;

&lt;p&gt;Думаете, кто-то ответил? В целом да, но нет так, как я ожидал. Меня спросили,
почему я считаю, что должно быть по-другому (хотя я не считал); зачем мне это
нужно и откуда такие вопросы. При этом в одном из чатов я был уже больше года, и
подозревать в троллинге было нелепо.&lt;/p&gt;

&lt;p&gt;Видно же, что люди знают ответ, никто, сука, никто не написал: начиная с JVM 8
компилятор адаптирует лямбды под интерфейсы с одним методом, точка. Спасибо,
хоть ссылку на чей-то блог скинули после пререканий.&lt;/p&gt;

&lt;p&gt;И вот я сидел и обтекал с этого. Парни, вы ни какие не профессионалы, а деды,
которые только и ждут реплики новичка, чтобы накинуться как воронье. Человек,
который бы ответил хоть одним предложением, получил бы мое расположение
навсегда. Но нет — были только еврейские вопросы обратно.&lt;/p&gt;

&lt;p&gt;Эта история только укрепила мое правило — людям нужно помогать. Когда кто-то
спрашивает, а у меня есть минутка, я отвечаю по мере знаний. С меня не убудет, а
тому бедняге, скорей всего, придется идти сквозь флуд к правильному решению. Так
что надо помочь.&lt;/p&gt;

&lt;p&gt;Несколько лет назад &lt;a href=&quot;/help/&quot;&gt;я писал пост&lt;/a&gt; про помощь коллеге. Опровергаю:
помогать коллегам нужно. Все равно вы спустите свободное время на Ютуб, а тут
хотя бы польза — умножение коллективных знаний.&lt;/p&gt;

&lt;p&gt;На работе у нас дежурство по ответам на тикеты клиентов. Никто не любит возиться
с ними, и я тоже. Но на некоторые вопросы, особенно связанные с веб-разработкой,
отвечаю супер-подробно, по два экрана получается. Чел на той стороне взрывается
кипятком, потому что обычно поддержке лишь бы закрыть тикет, а тут такое
чтиво. Эх, мне бы так отвечали!&lt;/p&gt;

&lt;p&gt;Вот и сейчас я пишу этот пост после того, как ответил некоему Томасу из
Швейцарии. Экран текста. Чел строит приложуху, но не идут дела. Зато благодаря
моим письмам продвинулся на стадию прототипа.&lt;/p&gt;

&lt;p&gt;Где-то я читал басню о том, как на заре Микрософта один клиент купил Ворд и
затупил. Он написал бумажное письмо с вопросами и бросил в ящик у двери
офиса. Через неделю он получил ответ на четырех листах, написанный от руки одним
из разработчиков. Тот чел до сих пор хранит это письмо. Вот она какая, любовь к
пользователям.&lt;/p&gt;

&lt;p&gt;Умрете — кто о вас вспомнит? Только те, кому вы помогали. Отвечайте и тогда
станете крутыми. Время никуда не убежит, все успеете. А иначе можно стать
токсичным мудаком и не заметить этого.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/help2/</link>
        <guid isPermaLink="true">https://grishaev.me/help2/</guid>
        
        <category>life</category>
        
        <category>help</category>
        
        
      </item>
    
  </channel>
</rss>
